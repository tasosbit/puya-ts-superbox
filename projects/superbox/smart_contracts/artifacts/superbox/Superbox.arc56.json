{
    "name": "Superbox",
    "structs": {
        "SuperboxMeta": [
            {
                "name": "boxByteLengths",
                "type": "uint16[]"
            },
            {
                "name": "totalByteLength",
                "type": "uint64"
            },
            {
                "name": "maxBoxSize",
                "type": "uint64"
            },
            {
                "name": "valueSize",
                "type": "uint64"
            },
            {
                "name": "valueSchema",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "superboxCreate",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "maxBoxSize"
                },
                {
                    "type": "uint64",
                    "name": "valueSize"
                },
                {
                    "type": "string",
                    "name": "valueSchema"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxAppend",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxDeleteIndex",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "valueIndex"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxDeleteBox",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "boxNum"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxDeleteSuperbox",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxGetMeta",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "(uint16[],uint64,uint64,uint64,string)",
                "struct": "SuperboxMeta"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxGetLocation",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "valueIndex"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxGetValue",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "valueIndex"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        709,
                        970,
                        1026,
                        1319,
                        1487,
                        1534
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        613
                    ],
                    "errorMessage": "ERR:DATALEN"
                },
                {
                    "pc": [
                        1344
                    ],
                    "errorMessage": "ERR:DLTD"
                },
                {
                    "pc": [
                        1475
                    ],
                    "errorMessage": "ERR:NEMPTY"
                },
                {
                    "pc": [
                        1468
                    ],
                    "errorMessage": "ERR:NEXIST"
                },
                {
                    "pc": [
                        455,
                        1339
                    ],
                    "errorMessage": "ERR:OOB"
                },
                {
                    "pc": [
                        571
                    ],
                    "errorMessage": "ERR:SBEXISTS"
                },
                {
                    "pc": [
                        404
                    ],
                    "errorMessage": "ERR:SBNEXIST"
                },
                {
                    "pc": [
                        109,
                        118,
                        152,
                        178,
                        200,
                        218,
                        245,
                        272,
                        301
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        338
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        112,
                        121,
                        155,
                        181,
                        203,
                        221,
                        248,
                        275,
                        304
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1203,
                        1239,
                        1301
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        769
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        464
                    ],
                    "errorMessage": "never?"
                },
                {
                    "pc": [
                        352
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}