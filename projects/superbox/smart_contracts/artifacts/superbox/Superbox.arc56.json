{
    "name": "Superbox",
    "structs": {
        "SuperboxMeta": [
            {
                "name": "boxByteLengths",
                "type": "uint16[]"
            },
            {
                "name": "totalByteLength",
                "type": "uint64"
            },
            {
                "name": "maxBoxSize",
                "type": "uint64"
            },
            {
                "name": "valueSize",
                "type": "uint64"
            },
            {
                "name": "valueSchema",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "superboxCreate",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "maxBoxSize"
                },
                {
                    "type": "uint64",
                    "name": "valueSize"
                },
                {
                    "type": "string",
                    "name": "valueSchema"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxAppend",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxDeleteIndex",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "valueIndex"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxDeleteBox",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "boxNum"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxDeleteSuperbox",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxGetMeta",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "(uint16[],uint64,uint64,uint64,string)",
                "struct": "SuperboxMeta"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxGetLocation",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "valueIndex"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "superboxGetValue",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "valueIndex"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noop",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        559,
                        811,
                        867,
                        1211,
                        1408,
                        1504
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        463
                    ],
                    "errorMessage": "ERR:DATALEN"
                },
                {
                    "pc": [
                        1236
                    ],
                    "errorMessage": "ERR:DLTD"
                },
                {
                    "pc": [
                        1384
                    ],
                    "errorMessage": "ERR:NEMPTY"
                },
                {
                    "pc": [
                        1377
                    ],
                    "errorMessage": "ERR:NEXIST"
                },
                {
                    "pc": [
                        238,
                        1231
                    ],
                    "errorMessage": "ERR:OOB"
                },
                {
                    "pc": [
                        386
                    ],
                    "errorMessage": "ERR:SBEXISTS"
                },
                {
                    "pc": [
                        187
                    ],
                    "errorMessage": "ERR:SBNEXIST"
                },
                {
                    "pc": [
                        37
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        121
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        722,
                        1294
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1071,
                        1107,
                        1171
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        222,
                        304,
                        338,
                        404,
                        421,
                        474,
                        601,
                        992,
                        1185,
                        1360,
                        1394,
                        1420,
                        1454
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        311,
                        345,
                        411,
                        428,
                        999,
                        1192,
                        1367,
                        1401,
                        1427,
                        1461
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        322,
                        331,
                        1010,
                        1203,
                        1438,
                        1472
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        619
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        247
                    ],
                    "errorMessage": "never?"
                },
                {
                    "pc": [
                        135
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}