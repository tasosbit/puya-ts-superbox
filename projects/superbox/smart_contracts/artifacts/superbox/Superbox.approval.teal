#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 2 1 8
    bytecblock "_m" 0x151f7c75 "" "0123456789"
    // smart_contracts/superbox/contract.algo.ts:15
    // export class Superbox extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@16
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x63114660 0x41b3ede2 0x1ad4dcc0 0xcd7bc3e9 0x28c64b05 0x082b31bb 0xea446731 0x3363062f 0xe83a87ab // method "superboxCreate(string,uint64,uint64,string)void", method "superboxAppend(string,byte[])uint64", method "superboxDeleteIndex(string,uint64)uint64", method "superboxDeleteBox(string,uint64)uint64", method "superboxDeleteSuperbox(string)void", method "superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)", method "superboxGetLocation(string,uint64)(uint64,uint64)", method "superboxGetValue(string,uint64)byte[]", method "noop()void"
    txna ApplicationArgs 0
    match superboxCreate superboxAppend superboxDeleteIndex superboxDeleteBox superboxDeleteSuperbox superboxGetMeta superboxGetLocation superboxGetValue main_noop_route@12
    err

main_noop_route@12:
    // smart_contracts/superbox/contract.algo.ts:51
    // public noop() {}
    intc_2 // 1
    return

main___algots__.defaultCreate@16:
    // smart_contracts/superbox/contract.algo.ts:15
    // export class Superbox extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_2 // 1
    return


// smart_contracts/superbox/lib/types.algo.ts::au16(num: uint64) -> bytes:
au16:
    // smart_contracts/superbox/lib/types.algo.ts:30
    // export function au16(num: uint64) {
    proto 1 1
    // smart_contracts/superbox/lib/types.algo.ts:31
    // return new Uint16(num)
    frame_dig -1
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    retsub


// smart_contracts/superbox/lib/utils.algo.ts::itoa(i: uint64) -> bytes:
itoa:
    // smart_contracts/superbox/lib/utils.algo.ts:9
    // export function itoa(i: uint64): string {
    proto 1 1
    // smart_contracts/superbox/lib/utils.algo.ts:12
    // if (i < radix) {
    frame_dig -1
    // smart_contracts/superbox/lib/utils.algo.ts:11
    // const radix = digits.length
    pushint 10 // 10
    // smart_contracts/superbox/lib/utils.algo.ts:12
    // if (i < radix) {
    <
    bz itoa_after_if_else@2
    // smart_contracts/superbox/lib/utils.algo.ts:13
    // return digits.at(i).toString()
    bytec_3 // "0123456789"
    frame_dig -1
    intc_2 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // smart_contracts/superbox/lib/utils.algo.ts:15
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    frame_dig -1
    // smart_contracts/superbox/lib/utils.algo.ts:11
    // const radix = digits.length
    pushint 10 // 10
    // smart_contracts/superbox/lib/utils.algo.ts:15
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    /
    callsub itoa
    frame_dig -1
    // smart_contracts/superbox/lib/utils.algo.ts:11
    // const radix = digits.length
    pushint 10 // 10
    // smart_contracts/superbox/lib/utils.algo.ts:15
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    %
    bytec_3 // "0123456789"
    swap
    intc_2 // 1
    extract3
    concat
    retsub


// smart_contracts/superbox/lib/utils.algo.ts::sbMetaBoxValue(name: bytes) -> bytes:
sbMetaBoxValue:
    // smart_contracts/superbox/lib/utils.algo.ts:53
    // export function sbMetaBoxValue(name: string): SuperboxMeta {
    proto 1 1
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    frame_dig -1
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/lib/utils.algo.ts:55
    // assert(metaBox.exists, 'ERR:SBNEXIST')
    dup
    box_len
    bury 1
    assert // ERR:SBNEXIST
    // smart_contracts/superbox/lib/utils.algo.ts:56
    // return metaBox.value
    box_get
    pop
    retsub


// smart_contracts/superbox/lib/superbox.algo.ts::sbGetLocation(name: bytes, valueIndex: uint64) -> bytes:
sbGetLocation:
    // smart_contracts/superbox/lib/superbox.algo.ts:204
    // export function sbGetLocation(name: string, valueIndex: uint64): [BoxNum, ByteOffset] {
    proto 2 1
    bytec_2 // ""
    // smart_contracts/superbox/lib/superbox.algo.ts:205
    // const meta = sbMetaBoxValue(name)
    frame_dig -2
    callsub sbMetaBoxValue
    // smart_contracts/superbox/lib/superbox.algo.ts:206
    // const valueSize = meta.valueSize.asUint64()
    dup
    pushint 18 // 18
    extract_uint64
    // smart_contracts/superbox/lib/superbox.algo.ts:207
    // const totalBoxes = meta.boxByteLengths.length
    dig 1
    intc_0 // 0
    extract_uint16
    dig 2
    pushint 26 // 26
    extract_uint16
    dig 3
    cover 2
    substring3
    dup
    cover 3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    cover 2
    // smart_contracts/superbox/lib/superbox.algo.ts:210
    // let byteIndex: uint64 = valueIndex * valueSize
    frame_dig -1
    dig 1
    *
    dup
    cover 3
    // smart_contracts/superbox/lib/superbox.algo.ts:213
    // assert(byteIndex + valueSize <= meta.totalByteLength.asUint64(), 'ERR:OOB')
    +
    swap
    intc_1 // 2
    extract_uint64
    <=
    assert // ERR:OOB
    // smart_contracts/superbox/lib/superbox.algo.ts:215
    // let elapsedBytes: uint64 = 0
    intc_0 // 0
    // smart_contracts/superbox/lib/superbox.algo.ts:216
    // for (let i: uint64 = 0; i < totalBoxes; i++) {
    dup

sbGetLocation_while_top@1:
    // smart_contracts/superbox/lib/superbox.algo.ts:216
    // for (let i: uint64 = 0; i < totalBoxes; i++) {
    frame_dig 5
    dup
    frame_dig 2
    <
    assert // never?
    // smart_contracts/superbox/lib/superbox.algo.ts:217
    // const boxSize = meta.boxByteLengths[i].asUint64()
    frame_dig 1
    extract 2 0
    swap
    intc_1 // 2
    *
    extract_uint16
    dup
    frame_bury 0
    // smart_contracts/superbox/lib/superbox.algo.ts:218
    // if (boxSize + elapsedBytes > byteIndex) {
    frame_dig 4
    +
    frame_dig 3
    >
    bz sbGetLocation_else_body@4
    // smart_contracts/superbox/lib/superbox.algo.ts:220
    // return [i, byteIndex - elapsedBytes]
    frame_dig 3
    frame_dig 4
    -
    frame_dig 5
    itob
    swap
    itob
    concat
    frame_bury 0
    retsub

sbGetLocation_else_body@4:
    // smart_contracts/superbox/lib/superbox.algo.ts:222
    // elapsedBytes += boxSize
    frame_dig 4
    frame_dig 0
    +
    frame_bury 4
    // smart_contracts/superbox/lib/superbox.algo.ts:216
    // for (let i: uint64 = 0; i < totalBoxes; i++) {
    frame_dig 5
    intc_2 // 1
    +
    frame_bury 5
    b sbGetLocation_while_top@1


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxCreate[routing]() -> void:
superboxCreate:
    // smart_contracts/superbox/contract.algo.ts:16
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 4
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    // smart_contracts/superbox/lib/types.algo.ts:35
    // return new Uint64(num)
    uncover 2
    itob
    uncover 2
    itob
    // smart_contracts/superbox/lib/superbox.algo.ts:14-20
    // const meta = new SuperboxMeta({
    //   totalByteLength: au64(0),
    //   maxBoxSize: au64(maxBoxSize),
    //   boxByteLengths: new DynamicArray<Uint16>(),
    //   valueSize: au64(valueSize),
    //   valueSchema: new Str(valueSchema),
    // })
    pushbytes 0x001c0000000000000000
    uncover 2
    concat
    swap
    concat
    pushbytes 0x001e0000
    concat
    swap
    concat
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    swap
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/lib/superbox.algo.ts:22
    // assert(!metaBox.exists, 'ERR:SBEXISTS')
    dup
    box_len
    bury 1
    !
    assert // ERR:SBEXISTS
    // smart_contracts/superbox/lib/superbox.algo.ts:23
    // metaBox.value = clone(meta)
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/superbox/contract.algo.ts:16
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    intc_2 // 1
    return


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxAppend[routing]() -> void:
superboxAppend:
    intc_0 // 0
    dup
    bytec_2 // ""
    dupn 7
    // smart_contracts/superbox/contract.algo.ts:20
    // public superboxAppend(name: string, data: bytes): uint64 {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    dup
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    dup
    uncover 2
    // smart_contracts/superbox/lib/superbox.algo.ts:33
    // const meta = sbMetaBoxValue(name)
    callsub sbMetaBoxValue
    dup
    cover 2
    // smart_contracts/superbox/lib/superbox.algo.ts:34
    // const maxBoxSize = meta.maxBoxSize.asUint64()
    dup
    pushint 10 // 10
    extract_uint64
    cover 2
    // smart_contracts/superbox/lib/superbox.algo.ts:35
    // const valueSize = meta.valueSize.asUint64()
    dup
    pushint 18 // 18
    extract_uint64
    dup
    cover 3
    // smart_contracts/superbox/lib/superbox.algo.ts:38
    // assert(data.length % valueSize === 0, 'ERR:DATALEN')
    uncover 2
    len
    dup
    cover 3
    swap
    %
    !
    assert // ERR:DATALEN
    // smart_contracts/superbox/lib/superbox.algo.ts:40
    // let currentBoxNum: uint64 = meta.boxByteLengths.length === 0 ? 0 : meta.boxByteLengths.length - 1
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    pushint 26 // 26
    extract_uint16
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bnz superboxAppend_ternary_false@3
    intc_0 // 0
    bury 11

superboxAppend_ternary_merge@4:
    // smart_contracts/superbox/lib/superbox.algo.ts:42
    // let dataWritten: uint64 = 0
    intc_0 // 0
    bury 10

superboxAppend_while_top@5:
    // smart_contracts/superbox/lib/superbox.algo.ts:44
    // while (dataWritten < data.length) {
    dig 9
    dig 2
    <
    // smart_contracts/superbox/lib/superbox.algo.ts:44-58
    // while (dataWritten < data.length) {
    //   const dataBox = sbDataBoxRef(name, currentBoxNum)
    //   const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    // 
    //   if (meta.boxByteLengths.length === currentBoxNum) {
    //     // new box
    //     meta.boxByteLengths.push(au16(chunkWritten))
    //   } else {
    //     // existing box
    //     meta.boxByteLengths[currentBoxNum] = au16(meta.boxByteLengths[currentBoxNum].asUint64() + chunkWritten)
    //   }
    // 
    //   dataWritten += chunkWritten
    //   currentBoxNum++
    // }
    bz superboxAppend_after_while@21
    // smart_contracts/superbox/lib/utils.algo.ts:25
    // return Bytes(name).concat(Bytes(itoa(num)))
    dig 10
    callsub itoa
    dig 7
    swap
    concat
    dup
    bury 17
    // smart_contracts/superbox/lib/superbox.algo.ts:46
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    dig 10
    dup
    dig 4
    dup
    cover 3
    >=
    dig 1
    dig 3
    uncover 2
    select
    swap
    dig 7
    +
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    dup
    dig 2
    <
    dig 2
    swap
    select
    dig 8
    cover 2
    substring3
    bury 18
    // smart_contracts/superbox/lib/superbox.algo.ts:77
    // if (box.exists) {
    box_len
    bury 1
    bz superboxAppend_else_body@14
    // smart_contracts/superbox/lib/superbox.algo.ts:79
    // let capacity: uint64 = maxBoxSize - box.length
    dig 15
    box_len
    assert // Box must have value
    dig 4
    swap
    -
    dup
    bury 14
    // smart_contracts/superbox/lib/superbox.algo.ts:81
    // if (capacity < valueSize) return 0
    dig 3
    <
    bz superboxAppend_after_if_else@9
    intc_0 // 0
    bury 12

superboxAppend_after_inlined_smart_contracts/superbox/lib/superbox.algo.ts::appendBox@17:
    // smart_contracts/superbox/lib/superbox.algo.ts:48
    // if (meta.boxByteLengths.length === currentBoxNum) {
    dig 4
    dup
    intc_0 // 0
    extract_uint16
    dup
    cover 2
    bury 16
    dup
    pushint 26 // 26
    extract_uint16
    dup
    cover 3
    swap
    cover 2
    substring3
    dup
    cover 2
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 18
    dig 13
    ==
    bz superboxAppend_else_body@19
    // smart_contracts/superbox/lib/superbox.algo.ts:50
    // meta.boxByteLengths.push(au16(chunkWritten))
    dig 13
    callsub au16
    uncover 2
    swap
    concat // on error: max array length exceeded
    dig 16
    intc_2 // 1
    +
    itob
    extract 6 2
    replace2 0
    dig 6
    dup
    cover 2
    intc_0 // 0
    dig 18
    dup
    cover 5
    extract3
    dig 1
    concat
    dig 2
    len
    uncover 3
    uncover 5
    dup
    cover 3
    uncover 2
    substring3
    uncover 2
    swap
    concat
    dig 1
    uncover 4
    -
    uncover 3
    len
    uncover 3
    +
    swap
    -
    itob
    extract 6 2
    replace2 26
    bury 5

superboxAppend_after_if_else@20:
    // smart_contracts/superbox/lib/superbox.algo.ts:56
    // dataWritten += chunkWritten
    dig 9
    dig 12
    +
    bury 10
    // smart_contracts/superbox/lib/superbox.algo.ts:57
    // currentBoxNum++
    dig 10
    intc_2 // 1
    +
    bury 11
    b superboxAppend_while_top@5

superboxAppend_else_body@19:
    // smart_contracts/superbox/lib/superbox.algo.ts:53
    // meta.boxByteLengths[currentBoxNum] = au16(meta.boxByteLengths[currentBoxNum].asUint64() + chunkWritten)
    swap
    dup
    extract 2 0
    dig 13
    intc_1 // 2
    *
    swap
    dig 1
    extract_uint16
    dig 15
    +
    callsub au16
    swap
    intc_1 // 2
    +
    swap
    replace3 // on error: index access is out of bounds
    dig 6
    dup
    cover 2
    intc_0 // 0
    dig 18
    dup
    cover 5
    extract3
    dig 1
    concat
    dig 2
    len
    uncover 3
    uncover 5
    dup
    cover 3
    uncover 2
    substring3
    uncover 2
    swap
    concat
    dig 1
    uncover 4
    -
    uncover 3
    len
    uncover 3
    +
    swap
    -
    itob
    extract 6 2
    replace2 26
    bury 5
    b superboxAppend_after_if_else@20

superboxAppend_after_if_else@9:
    // smart_contracts/superbox/lib/superbox.algo.ts:83
    // if (capacity % valueSize !== 0) {
    dig 12
    dig 3
    %
    dup
    bury 9
    bz superboxAppend_after_if_else@11
    // smart_contracts/superbox/lib/superbox.algo.ts:84
    // capacity -= capacity % valueSize
    dig 12
    dig 8
    -
    bury 13

superboxAppend_after_if_else@11:
    // smart_contracts/superbox/lib/superbox.algo.ts:86
    // if (data.length > capacity) {
    dig 16
    len
    dup
    dig 14
    >
    bz superboxAppend_else_body@13
    // smart_contracts/superbox/lib/superbox.algo.ts:88
    // const originalBoxLength = box.length
    dig 16
    dup
    box_len
    assert // Box must have value
    // smart_contracts/superbox/lib/superbox.algo.ts:89
    // box.resize(box.length + capacity)
    dup
    dig 16
    dup
    cover 3
    +
    dig 3
    swap
    box_resize
    // smart_contracts/superbox/lib/superbox.algo.ts:90
    // box.replace(originalBoxLength, data.slice(0, capacity))
    intc_0 // 0
    uncover 4
    dup
    cover 2
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    dig 3
    dig 2
    >=
    dig 4
    uncover 3
    uncover 2
    select
    dig 21
    cover 2
    substring3
    uncover 3
    cover 2
    box_replace
    bury 12
    // smart_contracts/superbox/lib/superbox.algo.ts:46
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/lib/superbox.algo.ts::appendBox@17

superboxAppend_else_body@13:
    // smart_contracts/superbox/lib/superbox.algo.ts:94
    // const originalBoxLength = box.length
    dig 16
    dup
    box_len
    assert // Box must have value
    // smart_contracts/superbox/lib/superbox.algo.ts:95
    // box.resize(box.length + data.length)
    dup
    dig 3
    +
    dig 2
    swap
    box_resize
    // smart_contracts/superbox/lib/superbox.algo.ts:96
    // box.replace(originalBoxLength, data)
    dig 19
    box_replace
    bury 12
    // smart_contracts/superbox/lib/superbox.algo.ts:46
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/lib/superbox.algo.ts::appendBox@17

superboxAppend_else_body@14:
    // smart_contracts/superbox/lib/superbox.algo.ts:103
    // if (capacity % valueSize !== 0) {
    dig 3
    dig 3
    %
    dup
    bury 10
    bnz superboxAppend_if_body@15
    dig 3

superboxAppend_after_if_else@16:
    // smart_contracts/superbox/lib/superbox.algo.ts:106
    // const dataToWrite = data.slice(0, capacity)
    dig 17
    dup
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    uncover 3
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    substring3
    // smart_contracts/superbox/lib/superbox.algo.ts:107
    // box.value = dataToWrite
    dig 16
    dup
    box_del
    pop
    dig 1
    box_put
    // smart_contracts/superbox/lib/superbox.algo.ts:108
    // return dataToWrite.length
    len
    bury 12
    // smart_contracts/superbox/lib/superbox.algo.ts:46
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/lib/superbox.algo.ts::appendBox@17

superboxAppend_if_body@15:
    // smart_contracts/superbox/lib/superbox.algo.ts:104
    // capacity -= capacity % valueSize
    dig 3
    dig 9
    -
    b superboxAppend_after_if_else@16

superboxAppend_after_while@21:
    // smart_contracts/superbox/lib/superbox.algo.ts:59
    // meta.totalByteLength = au64(meta.totalByteLength.asUint64() + dataWritten)
    dig 4
    dup
    intc_1 // 2
    extract_uint64
    dig 11
    +
    // smart_contracts/superbox/lib/types.algo.ts:35
    // return new Uint64(num)
    itob
    // smart_contracts/superbox/lib/superbox.algo.ts:59
    // meta.totalByteLength = au64(meta.totalByteLength.asUint64() + dataWritten)
    replace2 2
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    dig 7
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/lib/superbox.algo.ts:62
    // metaBox.delete()
    dup
    box_del
    pop
    // smart_contracts/superbox/lib/superbox.algo.ts:63
    // metaBox.value = clone(meta)
    dup
    box_del
    pop
    dig 1
    box_put
    // smart_contracts/superbox/lib/superbox.algo.ts:65
    // return meta.totalByteLength.asUint64()
    extract 2 8
    // smart_contracts/superbox/contract.algo.ts:20
    // public superboxAppend(name: string, data: bytes): uint64 {
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

superboxAppend_ternary_false@3:
    // smart_contracts/superbox/lib/superbox.algo.ts:40
    // let currentBoxNum: uint64 = meta.boxByteLengths.length === 0 ? 0 : meta.boxByteLengths.length - 1
    dup
    intc_2 // 1
    -
    bury 11
    b superboxAppend_ternary_merge@4


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxDeleteIndex[routing]() -> void:
superboxDeleteIndex:
    // smart_contracts/superbox/contract.algo.ts:24
    // public superboxDeleteIndex(name: string, valueIndex: uint64): uint64 {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    dig 1
    bytec_0 // "_m"
    concat
    dup
    cover 3
    cover 3
    // smart_contracts/superbox/lib/superbox.algo.ts:131
    // const [boxNum, byteOffset] = sbGetLocation(name, valueIndex)
    dig 1
    swap
    callsub sbGetLocation
    dup
    intc_0 // 0
    extract_uint64
    dup
    cover 2
    cover 4
    intc_3 // 8
    extract_uint64
    cover 3
    // smart_contracts/superbox/lib/utils.algo.ts:25
    // return Bytes(name).concat(Bytes(itoa(num)))
    dup
    callsub itoa
    uncover 2
    swap
    concat
    cover 2
    // smart_contracts/superbox/lib/superbox.algo.ts:134
    // const valueSize = meta.value.valueSize.asUint64()
    dig 1
    pushint 18 // 18
    intc_3 // 8
    box_extract
    btoi
    dup
    cover 3
    cover 4
    // smart_contracts/superbox/lib/superbox.algo.ts:135
    // const prevBoxByteLength = meta.value.boxByteLengths[boxNum].asUint64()
    dig 1
    pushint 28 // 28
    intc_1 // 2
    box_extract
    btoi
    dig 1
    >
    assert // index out of bounds
    intc_1 // 2
    *
    pushint 30 // 30
    +
    dup
    cover 4
    intc_1 // 2
    box_extract
    btoi
    dup
    cover 3
    // smart_contracts/superbox/lib/superbox.algo.ts:137
    // if (prevBoxByteLength === valueSize) {
    ==
    bz superboxDeleteIndex_else_body@3
    // smart_contracts/superbox/lib/superbox.algo.ts:139
    // dataBox.delete()
    box_del
    pop
    // smart_contracts/superbox/lib/superbox.algo.ts:141
    // meta.value.boxByteLengths[boxNum] = au16(0)
    intc_0 // 0
    callsub au16
    dig 6
    dup
    pushint 28 // 28
    intc_1 // 2
    box_extract
    btoi
    dig 7
    >
    assert // index out of bounds
    dig 3
    uncover 2
    box_replace

superboxDeleteIndex_after_if_else@4:
    // smart_contracts/superbox/lib/superbox.algo.ts:152
    // meta.value.totalByteLength = au64(meta.value.totalByteLength.asUint64() - valueSize)
    dig 5
    dup
    intc_1 // 2
    intc_3 // 8
    box_extract
    btoi
    dig 4
    -
    // smart_contracts/superbox/lib/types.algo.ts:35
    // return new Uint64(num)
    itob
    // smart_contracts/superbox/lib/superbox.algo.ts:152
    // meta.value.totalByteLength = au64(meta.value.totalByteLength.asUint64() - valueSize)
    dig 1
    intc_1 // 2
    uncover 2
    box_replace
    // smart_contracts/superbox/lib/superbox.algo.ts:154
    // return meta.value.totalByteLength.asUint64()
    intc_1 // 2
    intc_3 // 8
    box_extract
    // smart_contracts/superbox/contract.algo.ts:24
    // public superboxDeleteIndex(name: string, valueIndex: uint64): uint64 {
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

superboxDeleteIndex_else_body@3:
    // smart_contracts/superbox/lib/superbox.algo.ts:144
    // dataBox.splice(byteOffset, valueSize, Bytes``)
    dup
    dig 5
    dig 5
    dup
    cover 3
    bytec_2 // ""
    box_splice
    // smart_contracts/superbox/lib/superbox.algo.ts:146
    // dataBox.resize(prevBoxByteLength - valueSize)
    dig 2
    swap
    -
    swap
    dig 1
    box_resize
    // smart_contracts/superbox/lib/superbox.algo.ts:148
    // meta.value.boxByteLengths[boxNum] = au16(prevBoxByteLength - valueSize)
    callsub au16
    dig 6
    dup
    pushint 28 // 28
    intc_1 // 2
    box_extract
    btoi
    dig 7
    >
    assert // index out of bounds
    dig 3
    uncover 2
    box_replace
    b superboxDeleteIndex_after_if_else@4


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxDeleteBox[routing]() -> void:
superboxDeleteBox:
    // smart_contracts/superbox/contract.algo.ts:28
    // public superboxDeleteBox(name: string, boxNum: uint64): uint64 {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    dig 1
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/lib/superbox.algo.ts:165
    // const metaValue = clone(meta.value)
    dup
    box_get
    assert // Box must have value
    // smart_contracts/superbox/lib/utils.algo.ts:25
    // return Bytes(name).concat(Bytes(itoa(num)))
    dig 2
    callsub itoa
    uncover 4
    swap
    concat
    // smart_contracts/superbox/lib/superbox.algo.ts:168
    // assert(boxNum < metaValue.boxByteLengths.length, 'ERR:OOB')
    dig 2
    pushint 28 // 28
    intc_1 // 2
    box_extract
    btoi
    dig 4
    >
    assert // ERR:OOB
    // smart_contracts/superbox/lib/superbox.algo.ts:169
    // assert(dataBox.exists, 'ERR:DLTD')
    dup
    box_len
    bury 1
    assert // ERR:DLTD
    // smart_contracts/superbox/lib/superbox.algo.ts:172
    // metaValue.totalByteLength = au64(metaValue.totalByteLength.asUint64() - metaValue.boxByteLengths[boxNum].asUint64())
    dig 2
    intc_1 // 2
    intc_3 // 8
    box_extract
    btoi
    uncover 4
    intc_1 // 2
    *
    pushint 30 // 30
    dig 1
    +
    dig 5
    swap
    intc_1 // 2
    box_extract
    btoi
    uncover 2
    swap
    -
    // smart_contracts/superbox/lib/types.algo.ts:35
    // return new Uint64(num)
    itob
    // smart_contracts/superbox/lib/superbox.algo.ts:172
    // metaValue.totalByteLength = au64(metaValue.totalByteLength.asUint64() - metaValue.boxByteLengths[boxNum].asUint64())
    uncover 3
    swap
    replace2 2
    // smart_contracts/superbox/lib/superbox.algo.ts:173
    // metaValue.boxByteLengths[boxNum] = au16(0)
    intc_0 // 0
    callsub au16
    dig 1
    intc_0 // 0
    extract_uint16
    dig 2
    pushint 26 // 26
    extract_uint16
    dig 3
    dig 2
    dig 2
    substring3
    uncover 5
    intc_1 // 2
    +
    uncover 4
    replace3 // on error: index access is out of bounds
    dig 3
    intc_0 // 0
    dig 4
    extract3
    dig 1
    concat
    dig 4
    len
    uncover 5
    dig 4
    uncover 2
    substring3
    concat
    dig 2
    uncover 4
    -
    uncover 2
    len
    uncover 3
    +
    swap
    -
    itob
    extract 6 2
    replace2 26
    // smart_contracts/superbox/lib/superbox.algo.ts:174
    // meta.value = clone(metaValue)
    dig 2
    box_del
    pop
    uncover 2
    dig 1
    box_put
    // smart_contracts/superbox/lib/superbox.algo.ts:177
    // dataBox.delete()
    swap
    box_del
    pop
    // smart_contracts/superbox/lib/superbox.algo.ts:179
    // return metaValue.totalByteLength.asUint64()
    extract 2 8
    // smart_contracts/superbox/contract.algo.ts:28
    // public superboxDeleteBox(name: string, boxNum: uint64): uint64 {
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxDeleteSuperbox[routing]() -> void:
superboxDeleteSuperbox:
    // smart_contracts/superbox/contract.algo.ts:32
    // public superboxDeleteSuperbox(name: string) {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/lib/superbox.algo.ts:192
    // assert(metaBox.exists, 'ERR:NEXIST')
    dup
    box_len
    bury 1
    assert // ERR:NEXIST
    // smart_contracts/superbox/lib/superbox.algo.ts:193
    // assert(metaBox.value.totalByteLength.asUint64() === 0, 'ERR:NEMPTY')
    dup
    intc_1 // 2
    intc_3 // 8
    box_extract
    btoi
    !
    assert // ERR:NEMPTY
    // smart_contracts/superbox/lib/superbox.algo.ts:195
    // metaBox.delete()
    box_del
    pop
    // smart_contracts/superbox/contract.algo.ts:32
    // public superboxDeleteSuperbox(name: string) {
    intc_2 // 1
    return


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetMeta[routing]() -> void:
superboxGetMeta:
    // smart_contracts/superbox/contract.algo.ts:36
    // @abimethod({ readonly: true })
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // smart_contracts/superbox/lib/utils.algo.ts:45
    // return metaBoxMap(name + '_m')
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:38
    // return sbMetaBox(name).value
    box_get
    assert // Box must have value
    // smart_contracts/superbox/contract.algo.ts:36
    // @abimethod({ readonly: true })
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetLocation[routing]() -> void:
superboxGetLocation:
    // smart_contracts/superbox/contract.algo.ts:41
    // @abimethod({ readonly: true })
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/superbox/contract.algo.ts:43
    // return sbGetLocation(name, valueIndex)
    callsub sbGetLocation
    // smart_contracts/superbox/contract.algo.ts:41
    // @abimethod({ readonly: true })
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetValue[routing]() -> void:
superboxGetValue:
    // smart_contracts/superbox/contract.algo.ts:46
    // @abimethod({ readonly: true })
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/superbox/lib/superbox.algo.ts:236
    // const [boxNum, byteOffset] = sbGetLocation(name, valueIndex)
    dig 1
    swap
    callsub sbGetLocation
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    // smart_contracts/superbox/lib/utils.algo.ts:25
    // return Bytes(name).concat(Bytes(itoa(num)))
    swap
    callsub itoa
    dig 2
    swap
    concat
    // smart_contracts/superbox/lib/superbox.algo.ts:238
    // const valueSize = sbMetaBoxValue(name).valueSize.asUint64()
    uncover 2
    callsub sbMetaBoxValue
    pushint 18 // 18
    extract_uint64
    // smart_contracts/superbox/lib/superbox.algo.ts:239
    // return box.value.slice(byteOffset, byteOffset + valueSize)
    swap
    box_get
    assert // Box must have value
    dup
    len
    dig 3
    dig 1
    >=
    dig 4
    dig 2
    uncover 2
    select
    uncover 4
    uncover 4
    +
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    dup
    dig 2
    <
    dig 2
    swap
    select
    substring3
    // smart_contracts/superbox/contract.algo.ts:46
    // @abimethod({ readonly: true })
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return
