#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 10 4
    bytecblock "_m" 0x151f7c75 "0123456789"
    // smart_contracts/superbox/contract.algo.ts:109
    // export class Superbox extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x63114660 0x41b3ede2 0xab9cd6bc // method "superboxCreate(string,uint64,uint64,string)void", method "superboxAppend(string,byte[])uint64", method "superboxGetMeta(string)(uint32,uint16[],uint16,uint16,string)"
    txna ApplicationArgs 0
    match main_superboxCreate_route@3 main_superboxAppend_route@4 main_superboxGetMeta_route@5

main_after_if_else@12:
    // smart_contracts/superbox/contract.algo.ts:109
    // export class Superbox extends Contract {
    intc_0 // 0
    return

main_superboxGetMeta_route@5:
    // smart_contracts/superbox/contract.algo.ts:131
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:109
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/superbox/contract.algo.ts:131
    // @abimethod({ readonly: true })
    callsub superboxGetMeta
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_superboxAppend_route@4:
    // smart_contracts/superbox/contract.algo.ts:127
    // public superboxAppend(name: string, data: bytes): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:109
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/superbox/contract.algo.ts:127
    // public superboxAppend(name: string, data: bytes): uint64 {
    callsub superboxAppend
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_superboxCreate_route@3:
    // smart_contracts/superbox/contract.algo.ts:117
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:109
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    extract 2 0
    // smart_contracts/superbox/contract.algo.ts:117
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    callsub superboxCreate
    intc_1 // 1
    return

main_bare_routing@8:
    // smart_contracts/superbox/contract.algo.ts:109
    // export class Superbox extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/superbox/util.algo.ts::itoa(i: uint64) -> bytes:
itoa:
    // smart_contracts/superbox/util.algo.ts:3
    // export function itoa(i: uint64): string {
    proto 1 1
    // smart_contracts/superbox/util.algo.ts:6
    // if (i < radix) {
    frame_dig -1
    // smart_contracts/superbox/util.algo.ts:5
    // const radix = digits.length
    intc_2 // 10
    // smart_contracts/superbox/util.algo.ts:6
    // if (i < radix) {
    <
    bz itoa_after_if_else@2
    // smart_contracts/superbox/util.algo.ts:4
    // const digits = Bytes`0123456789`
    bytec_2 // "0123456789"
    // smart_contracts/superbox/util.algo.ts:7
    // return digits.at(i).toString()
    frame_dig -1
    intc_1 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    frame_dig -1
    // smart_contracts/superbox/util.algo.ts:5
    // const radix = digits.length
    intc_2 // 10
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    /
    callsub itoa
    frame_dig -1
    // smart_contracts/superbox/util.algo.ts:5
    // const radix = digits.length
    intc_2 // 10
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    %
    // smart_contracts/superbox/util.algo.ts:4
    // const digits = Bytes`0123456789`
    bytec_2 // "0123456789"
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    swap
    intc_1 // 1
    extract3
    concat
    retsub


// smart_contracts/superbox/types.algo.ts::au16(num: uint64) -> bytes:
au16:
    // smart_contracts/superbox/types.algo.ts:4
    // export function au16(num: uint64) {
    proto 1 1
    // smart_contracts/superbox/types.algo.ts:5
    // return new UintN16(num)
    frame_dig -1
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    retsub


// smart_contracts/superbox/types.algo.ts::au32(num: uint64) -> bytes:
au32:
    // smart_contracts/superbox/types.algo.ts:8
    // export function au32(num: uint64) {
    proto 1 1
    // smart_contracts/superbox/types.algo.ts:9
    // return new UintN32(num)
    frame_dig -1
    itob
    dup
    bitlen
    pushint 32 // 32
    <=
    assert // overflow
    extract 4 4
    retsub


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxCreate(name: bytes, maxBoxSize: uint64, valueSize: uint64, valueSchema: bytes) -> void:
superboxCreate:
    // smart_contracts/superbox/contract.algo.ts:117
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    proto 4 0
    // smart_contracts/superbox/contract.algo.ts:98
    // totalByteLength: au32(0),
    intc_0 // 0
    callsub au32
    // smart_contracts/superbox/contract.algo.ts:99
    // maxBoxSize: au16(maxBoxSize),
    frame_dig -3
    callsub au16
    // smart_contracts/superbox/contract.algo.ts:101
    // valueSize: au16(valueSize),
    frame_dig -2
    callsub au16
    // smart_contracts/superbox/contract.algo.ts:102
    // valueSchema: new Str(valueSchema),
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    // smart_contracts/superbox/contract.algo.ts:97-103
    // const meta = new SuperboxMeta({
    //   totalByteLength: au32(0),
    //   maxBoxSize: au16(maxBoxSize),
    //   boxByteLengths: new DynamicArray<UintN16>(),
    //   valueSize: au16(valueSize),
    //   valueSchema: new Str(valueSchema),
    // })
    uncover 3
    pushbytes 0x000c
    concat
    uncover 3
    concat
    uncover 2
    concat
    pushbytes 0x000e
    concat
    // smart_contracts/superbox/contract.algo.ts:100
    // boxByteLengths: new DynamicArray<UintN16>(),
    pushbytes 0x0000
    // smart_contracts/superbox/contract.algo.ts:97-103
    // const meta = new SuperboxMeta({
    //   totalByteLength: au32(0),
    //   maxBoxSize: au16(maxBoxSize),
    //   boxByteLengths: new DynamicArray<UintN16>(),
    //   valueSize: au16(valueSize),
    //   valueSchema: new Str(valueSchema),
    // })
    concat
    swap
    concat
    // smart_contracts/superbox/contract.algo.ts:16
    // return metaBoxMap(name + '_m')
    frame_dig -4
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:105
    // assert(!metaBox.exists, 'ERR:SBEXISTS')
    dup
    box_len
    bury 1
    !
    assert // ERR:SBEXISTS
    // smart_contracts/superbox/contract.algo.ts:106
    // metaBox.value = meta.copy()
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxAppend(name: bytes, data: bytes) -> uint64:
superboxAppend:
    // smart_contracts/superbox/contract.algo.ts:127
    // public superboxAppend(name: string, data: bytes): uint64 {
    proto 2 1
    intc_0 // 0
    dupn 3
    pushbytes ""
    dupn 8
    // smart_contracts/superbox/contract.algo.ts:16
    // return metaBoxMap(name + '_m')
    frame_dig -2
    bytec_0 // "_m"
    concat
    dupn 2
    // smart_contracts/superbox/contract.algo.ts:21
    // assert(metaBox.exists, 'ERR:SBNEXIST')
    box_len
    bury 1
    assert // ERR:SBNEXIST
    // smart_contracts/superbox/contract.algo.ts:22
    // return metaBox.value
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/superbox/contract.algo.ts:27
    // const maxBoxSize = meta.maxBoxSize.native
    dup
    pushint 6 // 6
    extract_uint16
    swap
    // smart_contracts/superbox/contract.algo.ts:28
    // const valueSize = meta.valueSize.native
    dup
    pushint 8 // 8
    extract_uint16
    dup
    cover 2
    // smart_contracts/superbox/contract.algo.ts:31
    // assert(data.length % valueSize === 0, 'ERR:DATALEN')
    frame_dig -1
    len
    dup
    cover 3
    swap
    %
    !
    assert // ERR:DATALEN
    // smart_contracts/superbox/contract.algo.ts:33
    // let currentBoxNum: uint64 = meta.boxByteLengths.length === 0 ? 0 : meta.boxByteLengths.length - 1
    dup
    intc_3 // 4
    extract_uint16
    dig 1
    intc_2 // 10
    extract_uint16
    substring3
    intc_0 // 0
    extract_uint16
    dup
    bnz superboxAppend_ternary_false@3
    intc_0 // 0
    frame_bury 7

superboxAppend_ternary_merge@4:
    // smart_contracts/superbox/contract.algo.ts:35
    // let dataWritten: uint64 = 0
    intc_0 // 0
    frame_bury 8

superboxAppend_while_top@5:
    // smart_contracts/superbox/contract.algo.ts:37
    // while (dataWritten < data.length) {
    frame_dig 8
    frame_dig 17
    <
    // smart_contracts/superbox/contract.algo.ts:37-52
    // while (dataWritten < data.length) {
    //   // evidently, puya ts dynamicarrays must be grown with push
    //   // `arr[newIndex] = newValue` fails
    //   if (meta.boxByteLengths.length === currentBoxNum) {
    //     meta.boxByteLengths.push(au16(0))
    //   }
    // 
    //   const dataBox = sbDataBoxRef(name, currentBoxNum)
    //   const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    // 
    //   meta.totalByteLength = au32(meta.totalByteLength.native + chunkWritten)
    //   meta.boxByteLengths[currentBoxNum] = au16(meta.boxByteLengths[currentBoxNum].native + chunkWritten)
    // 
    //   dataWritten += chunkWritten
    //   currentBoxNum++
    // }
    bz superboxAppend_after_while@20
    // smart_contracts/superbox/contract.algo.ts:40
    // if (meta.boxByteLengths.length === currentBoxNum) {
    frame_dig 14
    dup
    intc_3 // 4
    extract_uint16
    dup
    cover 2
    frame_bury 10
    dup
    intc_2 // 10
    extract_uint16
    dup
    frame_bury 9
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    frame_bury 3
    intc_0 // 0
    extract_uint16
    frame_dig 7
    ==
    swap
    frame_bury 2
    bz superboxAppend_after_if_else@8
    // smart_contracts/superbox/contract.algo.ts:41
    // meta.boxByteLengths.push(au16(0))
    frame_dig 3
    extract 2 0
    intc_0 // 0
    callsub au16
    concat
    dup
    len
    pushint 2 // 2
    /
    itob
    extract 6 2
    swap
    concat
    frame_dig 14
    dup
    intc_0 // 0
    frame_dig 10
    dup
    cover 5
    extract3
    dig 1
    len
    uncover 2
    frame_dig 9
    dup
    cover 4
    uncover 2
    substring3
    swap
    dig 3
    concat
    swap
    concat
    swap
    uncover 3
    -
    uncover 2
    len
    dig 2
    intc_2 // 10
    extract_uint16
    +
    swap
    -
    itob
    extract 6 2
    replace2 10
    frame_bury 2

superboxAppend_after_if_else@8:
    frame_dig 2
    frame_bury 14
    // smart_contracts/superbox/contract.algo.ts:7
    // return Bytes(name).concat(Bytes(itoa(num)))
    frame_dig 7
    callsub itoa
    frame_dig -2
    swap
    concat
    dup
    frame_bury 1
    // smart_contracts/superbox/contract.algo.ts:45
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    frame_dig 8
    dup
    frame_dig 17
    dup
    cover 3
    >=
    dig 1
    dig 3
    uncover 2
    select
    swap
    frame_dig 15
    +
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    dup
    dig 2
    <
    dig 2
    swap
    select
    frame_dig -1
    cover 2
    substring3
    frame_bury 0
    // smart_contracts/superbox/contract.algo.ts:62
    // if (box.exists) {
    box_len
    bury 1
    bz superboxAppend_else_body@16
    // smart_contracts/superbox/contract.algo.ts:64
    // let capacity: uint64 = maxBoxSize - box.length
    frame_dig 1
    box_len
    assert // Box must have value
    frame_dig 15
    swap
    -
    dup
    frame_bury 4
    // smart_contracts/superbox/contract.algo.ts:66
    // if (capacity < valueSize) return 0
    frame_dig 16
    <
    bz superboxAppend_after_if_else@11
    intc_0 // 0

superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@19:
    // smart_contracts/superbox/contract.algo.ts:47
    // meta.totalByteLength = au32(meta.totalByteLength.native + chunkWritten)
    frame_dig 14
    dup
    intc_0 // 0
    extract_uint32
    dig 2
    +
    callsub au32
    replace2 0
    // smart_contracts/superbox/contract.algo.ts:48
    // meta.boxByteLengths[currentBoxNum] = au16(meta.boxByteLengths[currentBoxNum].native + chunkWritten)
    dup
    intc_3 // 4
    extract_uint16
    dig 1
    intc_2 // 10
    extract_uint16
    dig 2
    dig 2
    dig 2
    substring3
    dup
    extract 2 0
    frame_dig 7
    dup
    cover 3
    pushint 2 // 2
    *
    swap
    dig 1
    extract_uint16
    dig 7
    +
    callsub au16
    dig 2
    intc_0 // 0
    extract_uint16
    dig 4
    >
    assert // Index access is out of bounds
    swap
    pushint 2 // 2
    +
    swap
    replace3
    dig 4
    intc_0 // 0
    dig 5
    extract3
    dig 5
    len
    uncover 6
    dig 5
    uncover 2
    substring3
    swap
    dig 2
    concat
    swap
    concat
    uncover 3
    uncover 4
    -
    uncover 2
    len
    dig 2
    intc_2 // 10
    extract_uint16
    +
    swap
    -
    itob
    extract 6 2
    replace2 10
    frame_bury 14
    // smart_contracts/superbox/contract.algo.ts:50
    // dataWritten += chunkWritten
    frame_dig 8
    uncover 2
    +
    frame_bury 8
    // smart_contracts/superbox/contract.algo.ts:51
    // currentBoxNum++
    intc_1 // 1
    +
    frame_bury 7
    b superboxAppend_while_top@5

superboxAppend_after_if_else@11:
    // smart_contracts/superbox/contract.algo.ts:68
    // if (capacity % valueSize !== 0) {
    frame_dig 4
    dup
    frame_dig 16
    %
    dup
    frame_bury 11
    swap
    frame_bury 5
    bz superboxAppend_after_if_else@13
    // smart_contracts/superbox/contract.algo.ts:69
    // capacity -= capacity % valueSize
    frame_dig 4
    frame_dig 11
    -
    frame_bury 5

superboxAppend_after_if_else@13:
    frame_dig 5
    dup
    frame_bury 4
    // smart_contracts/superbox/contract.algo.ts:71
    // if (data.length > capacity) {
    frame_dig 0
    len
    dup
    uncover 2
    >
    bz superboxAppend_else_body@15
    // smart_contracts/superbox/contract.algo.ts:73
    // const originalBoxLength = box.length
    frame_dig 1
    dup
    box_len
    assert // Box must have value
    // smart_contracts/superbox/contract.algo.ts:74
    // box.resize(box.length + capacity)
    dig 1
    box_len
    assert // Box must have value
    frame_dig 4
    dup
    cover 3
    +
    dig 3
    swap
    box_resize
    // smart_contracts/superbox/contract.algo.ts:75
    // box.replace(originalBoxLength, data.slice(0, capacity))
    intc_0 // 0
    uncover 4
    dup
    cover 2
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    dig 3
    dig 2
    >=
    dig 4
    uncover 3
    uncover 2
    select
    frame_dig 0
    cover 2
    substring3
    uncover 3
    cover 2
    box_replace
    // smart_contracts/superbox/contract.algo.ts:45
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@19

superboxAppend_else_body@15:
    // smart_contracts/superbox/contract.algo.ts:79
    // const originalBoxLength = box.length
    frame_dig 1
    dup
    box_len
    assert // Box must have value
    // smart_contracts/superbox/contract.algo.ts:80
    // box.resize(box.length + data.length)
    dig 1
    box_len
    assert // Box must have value
    uncover 3
    dup
    cover 3
    +
    dig 3
    swap
    box_resize
    // smart_contracts/superbox/contract.algo.ts:81
    // box.replace(originalBoxLength, data)
    uncover 2
    swap
    frame_dig 0
    box_replace
    // smart_contracts/superbox/contract.algo.ts:45
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@19

superboxAppend_else_body@16:
    // smart_contracts/superbox/contract.algo.ts:88
    // if (capacity % valueSize !== 0) {
    frame_dig 15
    dup
    frame_dig 16
    %
    dup
    frame_bury 12
    swap
    frame_bury 6
    bz superboxAppend_after_if_else@18
    // smart_contracts/superbox/contract.algo.ts:89
    // capacity -= capacity % valueSize
    frame_dig 15
    frame_dig 12
    -
    frame_bury 6

superboxAppend_after_if_else@18:
    // smart_contracts/superbox/contract.algo.ts:91
    // box.value = data.slice(0, capacity)
    frame_dig 0
    dup
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    frame_dig 6
    dup
    dig 3
    >=
    dig 1
    uncover 4
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    frame_dig 1
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/superbox/contract.algo.ts:45
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@19

superboxAppend_after_while@20:
    // smart_contracts/superbox/contract.algo.ts:55
    // metaBox.delete()
    frame_dig 13
    dup
    box_del
    pop
    // smart_contracts/superbox/contract.algo.ts:56
    // metaBox.value = meta.copy()
    dup
    box_del
    pop
    frame_dig 14
    dup
    cover 2
    box_put
    // smart_contracts/superbox/contract.algo.ts:58
    // return meta.totalByteLength.native
    intc_0 // 0
    extract_uint32
    // smart_contracts/superbox/contract.algo.ts:128
    // return sbAppend(name, data)
    frame_bury 0
    retsub

superboxAppend_ternary_false@3:
    // smart_contracts/superbox/contract.algo.ts:33
    // let currentBoxNum: uint64 = meta.boxByteLengths.length === 0 ? 0 : meta.boxByteLengths.length - 1
    frame_dig 18
    intc_1 // 1
    -
    frame_bury 7
    b superboxAppend_ternary_merge@4


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetMeta(name: bytes) -> bytes:
superboxGetMeta:
    // smart_contracts/superbox/contract.algo.ts:131-132
    // @abimethod({ readonly: true })
    // public superboxGetMeta(name: string): SuperboxMeta {
    proto 1 1
    // smart_contracts/superbox/contract.algo.ts:16
    // return metaBoxMap(name + '_m')
    frame_dig -1
    bytec_0 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:133
    // return sbMetaBox(name).value
    box_get
    assert // Box must have value
    retsub
