#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 26 10
    bytecblock 0x151f7c75 "_m" "0123456789" ""
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x63114660 0x41b3ede2 0xe83a87ab 0x264019cf 0xea446731 0x3363062f // method "superboxCreate(string,uint64,uint64,string)void", method "superboxAppend(string,byte[])uint64", method "noop()void", method "superboxGetMeta(string)(uint64,uint16[],uint64,uint64,string)", method "superboxGetLocation(string,uint64)(uint64,uint64)", method "superboxGetValue(string,uint64)byte[]"
    txna ApplicationArgs 0
    match main_superboxCreate_route@3 main_superboxAppend_route@4 main_noop_route@5 main_superboxGetMeta_route@6 main_superboxGetLocation_route@7 main_superboxGetValue_route@8

main_after_if_else@15:
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    intc_0 // 0
    return

main_superboxGetValue_route@8:
    // smart_contracts/superbox/contract.algo.ts:186
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/superbox/contract.algo.ts:186
    // @abimethod({ readonly: true })
    callsub superboxGetValue
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_superboxGetLocation_route@7:
    // smart_contracts/superbox/contract.algo.ts:181
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // smart_contracts/superbox/contract.algo.ts:181
    // @abimethod({ readonly: true })
    callsub superboxGetLocation
    swap
    itob
    swap
    itob
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_superboxGetMeta_route@6:
    // smart_contracts/superbox/contract.algo.ts:176
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/superbox/contract.algo.ts:176
    // @abimethod({ readonly: true })
    callsub superboxGetMeta
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_noop_route@5:
    // smart_contracts/superbox/contract.algo.ts:174
    // public noop() {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_superboxAppend_route@4:
    // smart_contracts/superbox/contract.algo.ts:170
    // public superboxAppend(name: string, data: bytes): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/superbox/contract.algo.ts:170
    // public superboxAppend(name: string, data: bytes): uint64 {
    callsub superboxAppend
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_superboxCreate_route@3:
    // smart_contracts/superbox/contract.algo.ts:160
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    extract 2 0
    // smart_contracts/superbox/contract.algo.ts:160
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    callsub superboxCreate
    intc_1 // 1
    return

main_bare_routing@11:
    // smart_contracts/superbox/contract.algo.ts:152
    // export class Superbox extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/superbox/util.algo.ts::itoa(i: uint64) -> bytes:
itoa:
    // smart_contracts/superbox/util.algo.ts:3
    // export function itoa(i: uint64): string {
    proto 1 1
    // smart_contracts/superbox/util.algo.ts:6
    // if (i < radix) {
    frame_dig -1
    // smart_contracts/superbox/util.algo.ts:5
    // const radix = digits.length
    intc_3 // 10
    // smart_contracts/superbox/util.algo.ts:6
    // if (i < radix) {
    <
    bz itoa_after_if_else@2
    // smart_contracts/superbox/util.algo.ts:4
    // const digits = Bytes`0123456789`
    bytec_2 // "0123456789"
    // smart_contracts/superbox/util.algo.ts:7
    // return digits.at(i).toString()
    frame_dig -1
    intc_1 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    frame_dig -1
    // smart_contracts/superbox/util.algo.ts:5
    // const radix = digits.length
    intc_3 // 10
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    /
    callsub itoa
    frame_dig -1
    // smart_contracts/superbox/util.algo.ts:5
    // const radix = digits.length
    intc_3 // 10
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    %
    // smart_contracts/superbox/util.algo.ts:4
    // const digits = Bytes`0123456789`
    bytec_2 // "0123456789"
    // smart_contracts/superbox/util.algo.ts:9
    // return itoa(i / radix).concat(digits.at(i % radix).toString())
    swap
    intc_1 // 1
    extract3
    concat
    retsub


// smart_contracts/superbox/types.algo.ts::au16(num: uint64) -> bytes:
au16:
    // smart_contracts/superbox/types.algo.ts:4
    // export function au16(num: uint64) {
    proto 1 1
    // smart_contracts/superbox/types.algo.ts:5
    // return new UintN16(num)
    frame_dig -1
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    retsub


// smart_contracts/superbox/contract.algo.ts::sbMetaBoxValue(name: bytes) -> bytes:
sbMetaBoxValue:
    // smart_contracts/superbox/contract.algo.ts:29
    // function sbMetaBoxValue(name: string): SuperboxMeta {
    proto 1 1
    // smart_contracts/superbox/contract.algo.ts:26
    // return metaBoxMap(name + '_m')
    frame_dig -1
    bytec_1 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:31
    // assert(metaBox.exists, 'ERR:SBNEXIST')
    dup
    box_len
    bury 1
    assert // ERR:SBNEXIST
    // smart_contracts/superbox/contract.algo.ts:32
    // return metaBox.value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/superbox/contract.algo.ts::sbGetLocation(name: bytes, valueIndex: uint64) -> uint64, uint64:
sbGetLocation:
    // smart_contracts/superbox/contract.algo.ts:120
    // function sbGetLocation(name: string, valueIndex: uint64): [BoxNum, ByteOffset] {
    proto 2 2
    bytec_3 // ""
    // smart_contracts/superbox/contract.algo.ts:121
    // const meta = sbMetaBoxValue(name)
    frame_dig -2
    callsub sbMetaBoxValue
    // smart_contracts/superbox/contract.algo.ts:122
    // const valueSize = meta.valueSize.native
    dup
    pushint 18 // 18
    extract_uint64
    // smart_contracts/superbox/contract.algo.ts:123
    // const totalBoxes = meta.boxByteLengths.length
    dig 1
    pushint 8 // 8
    extract_uint16
    dig 2
    intc_2 // 26
    extract_uint16
    dig 3
    cover 2
    substring3
    dup
    cover 3
    intc_0 // 0
    extract_uint16
    cover 2
    // smart_contracts/superbox/contract.algo.ts:126
    // let byteIndex: uint64 = valueIndex * valueSize
    frame_dig -1
    dig 1
    *
    dup
    cover 3
    // smart_contracts/superbox/contract.algo.ts:129
    // assert(byteIndex + valueSize <= meta.totalByteLength.native, 'ERR:OOB')
    +
    swap
    intc_0 // 0
    extract_uint64
    <=
    assert // ERR:OOB
    // smart_contracts/superbox/contract.algo.ts:131
    // let elapsedBytes: uint64 = 0
    intc_0 // 0
    // smart_contracts/superbox/contract.algo.ts:132
    // for (let i: uint64 = 0; i < totalBoxes; i++) {
    dup

sbGetLocation_while_top@1:
    // smart_contracts/superbox/contract.algo.ts:132
    // for (let i: uint64 = 0; i < totalBoxes; i++) {
    frame_dig 5
    dup
    frame_dig 2
    <
    assert // never?
    // smart_contracts/superbox/contract.algo.ts:133
    // const boxSize = meta.boxByteLengths[i].native
    frame_dig 1
    extract 2 0
    swap
    pushint 2 // 2
    *
    extract_uint16
    dup
    frame_bury 0
    // smart_contracts/superbox/contract.algo.ts:134
    // if (boxSize + elapsedBytes > byteIndex) {
    frame_dig 4
    +
    frame_dig 3
    >
    bz sbGetLocation_else_body@4
    // smart_contracts/superbox/contract.algo.ts:136
    // return [i, byteIndex - elapsedBytes]
    frame_dig 3
    frame_dig 4
    -
    frame_dig 5
    frame_bury 0
    frame_bury 1
    retsub

sbGetLocation_else_body@4:
    // smart_contracts/superbox/contract.algo.ts:138
    // elapsedBytes += boxSize
    frame_dig 4
    frame_dig 0
    +
    frame_bury 4
    // smart_contracts/superbox/contract.algo.ts:132
    // for (let i: uint64 = 0; i < totalBoxes; i++) {
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b sbGetLocation_while_top@1


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxCreate(name: bytes, maxBoxSize: uint64, valueSize: uint64, valueSchema: bytes) -> void:
superboxCreate:
    // smart_contracts/superbox/contract.algo.ts:160
    // public superboxCreate(name: string, maxBoxSize: uint64, valueSize: uint64, valueSchema: string) {
    proto 4 0
    // smart_contracts/superbox/types.algo.ts:13
    // return new UintN64(num)
    frame_dig -3
    itob
    frame_dig -2
    itob
    // smart_contracts/superbox/contract.algo.ts:41
    // valueSchema: new Str(valueSchema),
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    // smart_contracts/superbox/contract.algo.ts:36-42
    // const meta = new SuperboxMeta({
    //   totalByteLength: au64(0),
    //   maxBoxSize: au64(maxBoxSize),
    //   boxByteLengths: new DynamicArray<UintN16>(),
    //   valueSize: au64(valueSize),
    //   valueSchema: new Str(valueSchema),
    // })
    pushbytes 0x0000000000000000001c
    uncover 3
    concat
    uncover 2
    concat
    pushbytes 0x001e
    concat
    // smart_contracts/superbox/contract.algo.ts:39
    // boxByteLengths: new DynamicArray<UintN16>(),
    pushbytes 0x0000
    // smart_contracts/superbox/contract.algo.ts:36-42
    // const meta = new SuperboxMeta({
    //   totalByteLength: au64(0),
    //   maxBoxSize: au64(maxBoxSize),
    //   boxByteLengths: new DynamicArray<UintN16>(),
    //   valueSize: au64(valueSize),
    //   valueSchema: new Str(valueSchema),
    // })
    concat
    swap
    concat
    // smart_contracts/superbox/contract.algo.ts:26
    // return metaBoxMap(name + '_m')
    frame_dig -4
    bytec_1 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:44
    // assert(!metaBox.exists, 'ERR:SBEXISTS')
    dup
    box_len
    bury 1
    !
    assert // ERR:SBEXISTS
    // smart_contracts/superbox/contract.algo.ts:45
    // metaBox.value = meta.copy()
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxAppend(name: bytes, data: bytes) -> uint64:
superboxAppend:
    // smart_contracts/superbox/contract.algo.ts:170
    // public superboxAppend(name: string, data: bytes): uint64 {
    proto 2 1
    intc_0 // 0
    dup
    bytec_3 // ""
    dupn 9
    // smart_contracts/superbox/contract.algo.ts:49
    // const meta = sbMetaBoxValue(name)
    frame_dig -2
    callsub sbMetaBoxValue
    dupn 2
    // smart_contracts/superbox/contract.algo.ts:50
    // const maxBoxSize = meta.maxBoxSize.native
    intc_3 // 10
    extract_uint64
    swap
    // smart_contracts/superbox/contract.algo.ts:51
    // const valueSize = meta.valueSize.native
    dup
    pushint 18 // 18
    extract_uint64
    dup
    cover 2
    // smart_contracts/superbox/contract.algo.ts:54
    // assert(data.length % valueSize === 0, 'ERR:DATALEN')
    frame_dig -1
    len
    dup
    cover 3
    swap
    %
    !
    assert // ERR:DATALEN
    // smart_contracts/superbox/contract.algo.ts:56
    // let currentBoxNum: uint64 = meta.boxByteLengths.length === 0 ? 0 : meta.boxByteLengths.length - 1
    dup
    pushint 8 // 8
    extract_uint16
    dig 1
    intc_2 // 26
    extract_uint16
    substring3
    intc_0 // 0
    extract_uint16
    dup
    bnz superboxAppend_ternary_false@3
    intc_0 // 0
    frame_bury 6

superboxAppend_ternary_merge@4:
    // smart_contracts/superbox/contract.algo.ts:58
    // let dataWritten: uint64 = 0
    intc_0 // 0
    frame_bury 7

superboxAppend_while_top@5:
    // smart_contracts/superbox/contract.algo.ts:60
    // while (dataWritten < data.length) {
    frame_dig 7
    frame_dig 15
    <
    // smart_contracts/superbox/contract.algo.ts:60-74
    // while (dataWritten < data.length) {
    //   const dataBox = sbDataBoxRef(name, currentBoxNum)
    //   const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    // 
    //   if (meta.boxByteLengths.length === currentBoxNum) {
    //     // new box
    //     meta.boxByteLengths.push(au16(chunkWritten))
    //   } else {
    //     // existing box
    //     meta.boxByteLengths[currentBoxNum] = au16(meta.boxByteLengths[currentBoxNum].native + chunkWritten)
    //   }
    // 
    //   dataWritten += chunkWritten
    //   currentBoxNum++
    // }
    bz superboxAppend_after_while@21
    // smart_contracts/superbox/contract.algo.ts:17
    // return Bytes(name).concat(Bytes(itoa(num)))
    frame_dig 6
    callsub itoa
    frame_dig -2
    swap
    concat
    dup
    frame_bury 1
    // smart_contracts/superbox/contract.algo.ts:62
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    frame_dig 7
    dup
    frame_dig 15
    dup
    cover 3
    >=
    dig 1
    dig 3
    uncover 2
    select
    swap
    frame_dig 13
    +
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    dup
    dig 2
    <
    dig 2
    swap
    select
    frame_dig -1
    cover 2
    substring3
    frame_bury 0
    // smart_contracts/superbox/contract.algo.ts:85
    // if (box.exists) {
    box_len
    bury 1
    bz superboxAppend_else_body@14
    // smart_contracts/superbox/contract.algo.ts:87
    // let capacity: uint64 = maxBoxSize - box.length
    frame_dig 1
    box_len
    assert // Box must have value
    frame_dig 13
    swap
    -
    dup
    frame_bury 2
    // smart_contracts/superbox/contract.algo.ts:89
    // if (capacity < valueSize) return 0
    frame_dig 14
    <
    bz superboxAppend_after_if_else@9
    intc_0 // 0
    frame_bury 5

superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@17:
    // smart_contracts/superbox/contract.algo.ts:64
    // if (meta.boxByteLengths.length === currentBoxNum) {
    frame_dig 12
    dup
    pushint 8 // 8
    extract_uint16
    dup
    uncover 2
    dup
    intc_2 // 26
    extract_uint16
    dup
    frame_bury 8
    swap
    cover 2
    substring3
    dup
    cover 2
    intc_0 // 0
    extract_uint16
    dup
    frame_bury 11
    frame_dig 6
    ==
    bz superboxAppend_else_body@19
    // smart_contracts/superbox/contract.algo.ts:66
    // meta.boxByteLengths.push(au16(chunkWritten))
    swap
    extract 2 0
    frame_dig 5
    callsub au16
    concat
    dup
    len
    pushint 2 // 2
    /
    itob
    extract 6 2
    swap
    concat
    frame_dig 12
    dup
    intc_0 // 0
    dig 4
    extract3
    dig 1
    len
    uncover 2
    frame_dig 8
    dup
    cover 4
    uncover 2
    substring3
    swap
    dig 3
    concat
    swap
    concat
    swap
    uncover 3
    -
    uncover 2
    len
    dig 2
    intc_2 // 26
    extract_uint16
    +
    swap
    -
    itob
    extract 6 2
    replace2 26
    frame_bury 12

superboxAppend_after_if_else@20:
    // smart_contracts/superbox/contract.algo.ts:72
    // dataWritten += chunkWritten
    frame_dig 7
    frame_dig 5
    +
    frame_bury 7
    // smart_contracts/superbox/contract.algo.ts:73
    // currentBoxNum++
    frame_dig 6
    intc_1 // 1
    +
    frame_bury 6
    b superboxAppend_while_top@5

superboxAppend_else_body@19:
    // smart_contracts/superbox/contract.algo.ts:69
    // meta.boxByteLengths[currentBoxNum] = au16(meta.boxByteLengths[currentBoxNum].native + chunkWritten)
    swap
    dup
    extract 2 0
    frame_dig 6
    dup
    cover 2
    pushint 2 // 2
    *
    swap
    dig 1
    extract_uint16
    frame_dig 5
    +
    callsub au16
    uncover 2
    frame_dig 11
    <
    assert // Index access is out of bounds
    swap
    pushint 2 // 2
    +
    swap
    replace3
    frame_dig 12
    dup
    intc_0 // 0
    dig 4
    extract3
    dig 1
    len
    uncover 2
    frame_dig 8
    dup
    cover 4
    uncover 2
    substring3
    swap
    dig 3
    concat
    swap
    concat
    swap
    uncover 3
    -
    uncover 2
    len
    dig 2
    intc_2 // 26
    extract_uint16
    +
    swap
    -
    itob
    extract 6 2
    replace2 26
    frame_bury 12
    b superboxAppend_after_if_else@20

superboxAppend_after_if_else@9:
    // smart_contracts/superbox/contract.algo.ts:91
    // if (capacity % valueSize !== 0) {
    frame_dig 2
    dup
    frame_dig 14
    %
    dup
    frame_bury 9
    swap
    frame_bury 3
    bz superboxAppend_after_if_else@11
    // smart_contracts/superbox/contract.algo.ts:92
    // capacity -= capacity % valueSize
    frame_dig 2
    frame_dig 9
    -
    frame_bury 3

superboxAppend_after_if_else@11:
    frame_dig 3
    dup
    frame_bury 2
    // smart_contracts/superbox/contract.algo.ts:94
    // if (data.length > capacity) {
    frame_dig 0
    len
    dup
    uncover 2
    >
    bz superboxAppend_else_body@13
    // smart_contracts/superbox/contract.algo.ts:96
    // const originalBoxLength = box.length
    frame_dig 1
    dup
    box_len
    assert // Box must have value
    // smart_contracts/superbox/contract.algo.ts:97
    // box.resize(box.length + capacity)
    dig 1
    box_len
    assert // Box must have value
    frame_dig 2
    dup
    cover 3
    +
    dig 3
    swap
    box_resize
    // smart_contracts/superbox/contract.algo.ts:98
    // box.replace(originalBoxLength, data.slice(0, capacity))
    intc_0 // 0
    uncover 4
    dup
    cover 2
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    dig 3
    dig 2
    >=
    dig 4
    uncover 3
    uncover 2
    select
    frame_dig 0
    cover 2
    substring3
    uncover 3
    cover 2
    box_replace
    frame_bury 5
    // smart_contracts/superbox/contract.algo.ts:62
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@17

superboxAppend_else_body@13:
    // smart_contracts/superbox/contract.algo.ts:102
    // const originalBoxLength = box.length
    frame_dig 1
    dup
    box_len
    assert // Box must have value
    // smart_contracts/superbox/contract.algo.ts:103
    // box.resize(box.length + data.length)
    dig 1
    box_len
    assert // Box must have value
    uncover 3
    dup
    cover 3
    +
    dig 3
    swap
    box_resize
    // smart_contracts/superbox/contract.algo.ts:104
    // box.replace(originalBoxLength, data)
    uncover 2
    swap
    frame_dig 0
    box_replace
    frame_bury 5
    // smart_contracts/superbox/contract.algo.ts:62
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@17

superboxAppend_else_body@14:
    // smart_contracts/superbox/contract.algo.ts:111
    // if (capacity % valueSize !== 0) {
    frame_dig 13
    dup
    frame_dig 14
    %
    dup
    frame_bury 10
    swap
    frame_bury 4
    bz superboxAppend_after_if_else@16
    // smart_contracts/superbox/contract.algo.ts:112
    // capacity -= capacity % valueSize
    frame_dig 13
    frame_dig 10
    -
    frame_bury 4

superboxAppend_after_if_else@16:
    // smart_contracts/superbox/contract.algo.ts:114
    // const dataToWrite = data.slice(0, capacity)
    frame_dig 0
    dup
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    frame_dig 4
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    substring3
    // smart_contracts/superbox/contract.algo.ts:115
    // box.value = dataToWrite
    frame_dig 1
    dup
    box_del
    pop
    dig 1
    box_put
    // smart_contracts/superbox/contract.algo.ts:116
    // return dataToWrite.length
    len
    frame_bury 5
    // smart_contracts/superbox/contract.algo.ts:62
    // const chunkWritten = appendBox(dataBox, data.slice(dataWritten, dataWritten + maxBoxSize), maxBoxSize, valueSize)
    b superboxAppend_after_inlined_smart_contracts/superbox/contract.algo.ts::appendBox@17

superboxAppend_after_while@21:
    // smart_contracts/superbox/contract.algo.ts:75
    // meta.totalByteLength = au64(meta.totalByteLength.native + dataWritten)
    frame_dig 12
    dup
    intc_0 // 0
    extract_uint64
    frame_dig 7
    +
    // smart_contracts/superbox/types.algo.ts:13
    // return new UintN64(num)
    itob
    // smart_contracts/superbox/contract.algo.ts:75
    // meta.totalByteLength = au64(meta.totalByteLength.native + dataWritten)
    replace2 0
    // smart_contracts/superbox/contract.algo.ts:26
    // return metaBoxMap(name + '_m')
    frame_dig -2
    bytec_1 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:78
    // metaBox.delete()
    dup
    box_del
    pop
    // smart_contracts/superbox/contract.algo.ts:79
    // metaBox.value = meta.copy()
    dup
    box_del
    pop
    dig 1
    box_put
    // smart_contracts/superbox/contract.algo.ts:81
    // return meta.totalByteLength.native
    intc_0 // 0
    extract_uint64
    // smart_contracts/superbox/contract.algo.ts:171
    // return sbAppend(name, data)
    frame_bury 0
    retsub

superboxAppend_ternary_false@3:
    // smart_contracts/superbox/contract.algo.ts:56
    // let currentBoxNum: uint64 = meta.boxByteLengths.length === 0 ? 0 : meta.boxByteLengths.length - 1
    frame_dig 16
    intc_1 // 1
    -
    frame_bury 6
    b superboxAppend_ternary_merge@4


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetMeta(name: bytes) -> bytes:
superboxGetMeta:
    // smart_contracts/superbox/contract.algo.ts:176-177
    // @abimethod({ readonly: true })
    // public superboxGetMeta(name: string): SuperboxMeta {
    proto 1 1
    // smart_contracts/superbox/contract.algo.ts:26
    // return metaBoxMap(name + '_m')
    frame_dig -1
    bytec_1 // "_m"
    concat
    // smart_contracts/superbox/contract.algo.ts:178
    // return sbMetaBox(name).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetLocation(name: bytes, valueIndex: uint64) -> uint64, uint64:
superboxGetLocation:
    // smart_contracts/superbox/contract.algo.ts:181-182
    // @abimethod({ readonly: true })
    // public superboxGetLocation(name: string, valueIndex: uint64): [BoxNum, ByteOffset] {
    proto 2 2
    // smart_contracts/superbox/contract.algo.ts:183
    // return sbGetLocation(name, valueIndex)
    frame_dig -2
    frame_dig -1
    callsub sbGetLocation
    retsub


// smart_contracts/superbox/contract.algo.ts::Superbox.superboxGetValue(name: bytes, valueIndex: uint64) -> bytes:
superboxGetValue:
    // smart_contracts/superbox/contract.algo.ts:186-187
    // @abimethod({ readonly: true })
    // public superboxGetValue(name: string, valueIndex: uint64): bytes {
    proto 2 1
    // smart_contracts/superbox/contract.algo.ts:146
    // const [boxNum, byteOffset] = sbGetLocation(name, valueIndex)
    frame_dig -2
    frame_dig -1
    callsub sbGetLocation
    // smart_contracts/superbox/contract.algo.ts:17
    // return Bytes(name).concat(Bytes(itoa(num)))
    swap
    callsub itoa
    frame_dig -2
    swap
    concat
    // smart_contracts/superbox/contract.algo.ts:148
    // const valueSize = sbMetaBoxValue(name).valueSize.native
    frame_dig -2
    callsub sbMetaBoxValue
    pushint 18 // 18
    extract_uint64
    // smart_contracts/superbox/contract.algo.ts:149
    // return box.value.slice(byteOffset, byteOffset + valueSize)
    swap
    box_get
    assert // Box must have value
    dup
    len
    dig 3
    dig 1
    >=
    dig 4
    dig 2
    uncover 2
    select
    uncover 4
    uncover 4
    +
    dup
    dig 3
    >=
    swap
    uncover 3
    uncover 2
    select
    dup
    dig 2
    <
    dig 2
    swap
    select
    substring3
    // smart_contracts/superbox/contract.algo.ts:188
    // return sbGetData(name, valueIndex)
    retsub
