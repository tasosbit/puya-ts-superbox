/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Superbox","structs":{"SuperboxMeta":[{"name":"boxByteLengths","type":"uint16[]"},{"name":"totalByteLength","type":"uint64"},{"name":"maxBoxSize","type":"uint64"},{"name":"valueSize","type":"uint64"},{"name":"valueSchema","type":"string"}]},"methods":[{"name":"superboxCreate","args":[{"type":"string","name":"name"},{"type":"uint64","name":"maxBoxSize"},{"type":"uint64","name":"valueSize"},{"type":"string","name":"valueSchema"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"superboxAppend","args":[{"type":"string","name":"name"},{"type":"byte[]","name":"data"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"superboxDeleteIndex","args":[{"type":"string","name":"name"},{"type":"uint64","name":"valueIndex"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"superboxDeleteBox","args":[{"type":"string","name":"name"},{"type":"uint64","name":"boxNum"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"superboxDeleteSuperbox","args":[{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"superboxGetMeta","args":[{"type":"string","name":"name"}],"returns":{"type":"(uint16[],uint64,uint64,uint64,string)","struct":"SuperboxMeta"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"superboxGetLocation","args":[{"type":"string","name":"name"},{"type":"uint64","name":"valueIndex"}],"returns":{"type":"(uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"superboxGetValue","args":[{"type":"string","name":"name"},{"type":"uint64","name":"valueIndex"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"noop","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[709,970,1026,1319,1487,1534],"errorMessage":"Box must have value"},{"pc":[613],"errorMessage":"ERR:DATALEN"},{"pc":[1344],"errorMessage":"ERR:DLTD"},{"pc":[1475],"errorMessage":"ERR:NEMPTY"},{"pc":[1468],"errorMessage":"ERR:NEXIST"},{"pc":[455,1339],"errorMessage":"ERR:OOB"},{"pc":[571],"errorMessage":"ERR:SBEXISTS"},{"pc":[404],"errorMessage":"ERR:SBNEXIST"},{"pc":[109,118,152,178,200,218,245,272,301],"errorMessage":"OnCompletion is not NoOp"},{"pc":[338],"errorMessage":"can only call when creating"},{"pc":[112,121,155,181,203,221,248,275,304],"errorMessage":"can only call when not creating"},{"pc":[1203,1239,1301],"errorMessage":"index out of bounds"},{"pc":[769],"errorMessage":"max array length exceeded"},{"pc":[464],"errorMessage":"never?"},{"pc":[352],"errorMessage":"overflow"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAIBCCYEAl9tBBUffHUACjAxMjM0NTY3ODkxG0EBKIIJBGMRRmAEQbPt4gQa1NzABM17w+kEKMZLBQQIKzG7BOpEZzEEM2MGLwToOoerNhoAjgkAwgClAIoAbwBdAEcALQALAAIiQzEZFEQxGEQkQzEZFEQxGEQ2GgFXAgA2GgIXiAVVSRUWVwYCTFApTFCwJEMxGRREMRhENhoBVwIANhoCF4gFKClMULAkQzEZFEQxGEQ2GgFXAgCIBQgpTFCwJEMxGRREMRhENhoBVwIAiATcJEMxGRREMRhENhoBVwIANhoCF4gEMxYpTFCwJEMxGRREMRhENhoBVwIANhoCF4gDchYpTFCwJEMxGRREMRhENhoBVwIANhoCVwIAiAEfFilMULAkQzEZFEQxGEQ2GgFXAgA2GgIXNhoDFzYaBFcCAIgAvCRDMRlA/xkxGBREJEOKAQGL/xZJk4EQDkRXBgKJigEBi/+BCgxBAAYri/8kWImL/4EKCoj/54v/gQoYK0wkWFCJigEBi/8oUEm9RQFEvkiJigIBKov+iP/oSYESW0sBIllLAoEaWUsDTgJSSU4DIllOAov/SwELSU4DCEwjWw5EIkmLBUmLAgxEiwFXAgBMIwtZSYwAiwQIiwMNQQAOiwOLBAmLBRZMFlCMAImLBIsACIwEiwUkCIwFQv/GigQAi/0Wi/4Wi/8VFlcGAov/UIAKABwAAAAAAAAAAE8DUE8CUIAEAB4AAFBMUIv8KFBJvUUBFERJvEhMv4mKAgEiSSpHCYv+iP86RwKBCltMSYESW0lOAov/FUlOA0wYFERJIllLAYEaWVIiWUlAAfoijAgijAmLCYsPDEEBz4sIiP7di/5MUEmMAYsJSYsPSU4DD0sBSwNPAk1Miw0ISUsDD0xPA08CTUlLAgxLAkxNi/9OAlKMAL1FAUEBUYsBvUSLDUwJSYwEiw4MQQDOIowHiwxJIllJTgKMA0mBGllJTgNMTgJSSU4CIllJjAKLCBJBAFiLB4j+V08CTFCLAiQIFlcGAlwAiwxJTgIiiwNJTgVYSwFQSwIVTwNPBUlOA08CUk8CTFBLAU8ECU8DFU8DCEwJFlcGAlwajAyLCYsHCIwJiwgkCIwIQv8qTElXAgCLCCMLTEsBWYsHCIj98UwjCExdiwxJTgIiiwNJTgVYSwFQSwIVTwNPBUlOA08CUk8CTFBLAU8ECU8DFU8DCEwJFlcGAlwajAxC/6CLBEmLDhhJjAtMjAVBAAeLBIsLCYwFiwVJjASLABVJTwINQQA4iwFJvURJiwRJTgMISwNM0yJPBElOAg8iSwJPAk1LA0sCD0sETwNPAk2LAE4CUk8DTgK7jAdC/tiLAUm9RElLAwhLAkzTiwC7jAdC/sOLDUmLDhhJjApMjAZBAAeLDYsKCYwGiwBJFSJLAQ8iSwJPAk2LBklLAw9MTwNPAk1SiwFJvEhLAb8VjAdC/oSLDEkjW4sJCBZcAov+KFBJvEhJvEhLAb8jW4wAiYsQJAmMCEL+AIoCAYv+KFBJi/6L/4j9EUkiW0lOAk4DJVtOAkmI/M6L/kxQTgJLAYESJboXSU4DTgRLAYEcI7oXSwENRCMLgR4ISU4EI7oXSU4DEkEAL7xIIoj8iYsASYEcI7oXiwENRIsETwK7iwBJIyW6F4sDCRZLASNPArsjJboXjACJSYsCiwNJTgMq0osFTAlMSwHTiPxLiwBJgRwjuheLAQ1EiwRPArtC/7+KAgGL/ihQSb5Ei/+I/DiL/kxQSwKBHCO6F4v/DURJvUUBREsCIyW6F4v/IwuBHksBCEsFTCO6F08CTAkWTwNMXAIiiPvxSwEiWUsCgRpZSwNLAksCUk8FIwhPBF1LAyJLBFhLAVBLBBVPBUsETwJSUEsCTwQJTwIVTwMITAkWVwYCXBpLArxITwJLAb9MvEgjW4mKAQCL/yhQSb1FAURJIyW6FxREvEiJigEBi/8oUL5EiYoCAYv+i/+I+72JigIBi/6L/4j7skkiW0wlW0yI+3WL/kxQi/6I+5CBEltMvkRJFUsDSwEPSwRLAk8CTU8ETwQISUsDD0xPA08CTUlLAgxLAkxNUok=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":0,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type SuperboxMeta = {
  boxByteLengths: number[],
  totalByteLength: bigint,
  maxBoxSize: bigint,
  valueSize: bigint,
  valueSchema: string
}


/**
 * Converts the ABI tuple representation of a SuperboxMeta to the struct representation
 */
export function SuperboxMetaFromTuple(abiTuple: [number[], bigint, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.SuperboxMeta, APP_SPEC.structs) as SuperboxMeta
}

/**
 * The argument types for the Superbox contract
 */
export type SuperboxArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'superboxCreate(string,uint64,uint64,string)void': {
      name: string
      maxBoxSize: bigint | number
      valueSize: bigint | number
      valueSchema: string
    }
    'superboxAppend(string,byte[])uint64': {
      name: string
      data: Uint8Array
    }
    'superboxDeleteIndex(string,uint64)uint64': {
      name: string
      valueIndex: bigint | number
    }
    'superboxDeleteBox(string,uint64)uint64': {
      name: string
      boxNum: bigint | number
    }
    'superboxDeleteSuperbox(string)void': {
      name: string
    }
    'superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)': {
      name: string
    }
    'superboxGetLocation(string,uint64)(uint64,uint64)': {
      name: string
      valueIndex: bigint | number
    }
    'superboxGetValue(string,uint64)byte[]': {
      name: string
      valueIndex: bigint | number
    }
    'noop()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'superboxCreate(string,uint64,uint64,string)void': [name: string, maxBoxSize: bigint | number, valueSize: bigint | number, valueSchema: string]
    'superboxAppend(string,byte[])uint64': [name: string, data: Uint8Array]
    'superboxDeleteIndex(string,uint64)uint64': [name: string, valueIndex: bigint | number]
    'superboxDeleteBox(string,uint64)uint64': [name: string, boxNum: bigint | number]
    'superboxDeleteSuperbox(string)void': [name: string]
    'superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)': [name: string]
    'superboxGetLocation(string,uint64)(uint64,uint64)': [name: string, valueIndex: bigint | number]
    'superboxGetValue(string,uint64)byte[]': [name: string, valueIndex: bigint | number]
    'noop()void': []
  }
}

/**
 * The return type for each method
 */
export type SuperboxReturns = {
  'superboxCreate(string,uint64,uint64,string)void': void
  'superboxAppend(string,byte[])uint64': bigint
  'superboxDeleteIndex(string,uint64)uint64': bigint
  'superboxDeleteBox(string,uint64)uint64': bigint
  'superboxDeleteSuperbox(string)void': void
  'superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)': SuperboxMeta
  'superboxGetLocation(string,uint64)(uint64,uint64)': [bigint, bigint]
  'superboxGetValue(string,uint64)byte[]': Uint8Array
  'noop()void': void
}

/**
 * Defines the types of available calls and state of the Superbox smart contract.
 */
export type SuperboxTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'superboxCreate(string,uint64,uint64,string)void' | 'superboxCreate', {
      argsObj: SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void']
      argsTuple: SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']
      returns: SuperboxReturns['superboxCreate(string,uint64,uint64,string)void']
    }>
    & Record<'superboxAppend(string,byte[])uint64' | 'superboxAppend', {
      argsObj: SuperboxArgs['obj']['superboxAppend(string,byte[])uint64']
      argsTuple: SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']
      returns: SuperboxReturns['superboxAppend(string,byte[])uint64']
    }>
    & Record<'superboxDeleteIndex(string,uint64)uint64' | 'superboxDeleteIndex', {
      argsObj: SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64']
      argsTuple: SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']
      returns: SuperboxReturns['superboxDeleteIndex(string,uint64)uint64']
    }>
    & Record<'superboxDeleteBox(string,uint64)uint64' | 'superboxDeleteBox', {
      argsObj: SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64']
      argsTuple: SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']
      returns: SuperboxReturns['superboxDeleteBox(string,uint64)uint64']
    }>
    & Record<'superboxDeleteSuperbox(string)void' | 'superboxDeleteSuperbox', {
      argsObj: SuperboxArgs['obj']['superboxDeleteSuperbox(string)void']
      argsTuple: SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']
      returns: SuperboxReturns['superboxDeleteSuperbox(string)void']
    }>
    & Record<'superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)' | 'superboxGetMeta', {
      argsObj: SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']
      argsTuple: SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']
      returns: SuperboxReturns['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']
    }>
    & Record<'superboxGetLocation(string,uint64)(uint64,uint64)' | 'superboxGetLocation', {
      argsObj: SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)']
      argsTuple: SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']
      returns: SuperboxReturns['superboxGetLocation(string,uint64)(uint64,uint64)']
    }>
    & Record<'superboxGetValue(string,uint64)byte[]' | 'superboxGetValue', {
      argsObj: SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]']
      argsTuple: SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']
      returns: SuperboxReturns['superboxGetValue(string,uint64)byte[]']
    }>
    & Record<'noop()void' | 'noop', {
      argsObj: SuperboxArgs['obj']['noop()void']
      argsTuple: SuperboxArgs['tuple']['noop()void']
      returns: SuperboxReturns['noop()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type SuperboxSignatures = keyof SuperboxTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SuperboxNonVoidMethodSignatures = keyof SuperboxTypes['methods'] extends infer T ? T extends keyof SuperboxTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Superbox smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SuperboxSignatures> = SuperboxTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Superbox smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SuperboxSignatures> = SuperboxTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type SuperboxCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SuperboxDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SuperboxCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Superbox smart contract
 */
export abstract class SuperboxParamsFactory {
  /**
   * Constructs a no op call for the superboxCreate(string,uint64,uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxCreate(params: CallParams<SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void'] | SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxCreate(string,uint64,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.maxBoxSize, params.args.valueSize, params.args.valueSchema],
    }
  }
  /**
   * Constructs a no op call for the superboxAppend(string,byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxAppend(params: CallParams<SuperboxArgs['obj']['superboxAppend(string,byte[])uint64'] | SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxAppend(string,byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the superboxDeleteIndex(string,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxDeleteIndex(params: CallParams<SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxDeleteIndex(string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.valueIndex],
    }
  }
  /**
   * Constructs a no op call for the superboxDeleteBox(string,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxDeleteBox(params: CallParams<SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxDeleteBox(string,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.boxNum],
    }
  }
  /**
   * Constructs a no op call for the superboxDeleteSuperbox(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxDeleteSuperbox(params: CallParams<SuperboxArgs['obj']['superboxDeleteSuperbox(string)void'] | SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxDeleteSuperbox(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxGetMeta(params: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the superboxGetLocation(string,uint64)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxGetLocation(params: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxGetLocation(string,uint64)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.valueIndex],
    }
  }
  /**
   * Constructs a no op call for the superboxGetValue(string,uint64)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static superboxGetValue(params: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'superboxGetValue(string,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.valueIndex],
    }
  }
  /**
   * Constructs a no op call for the noop()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noop(params: CallParams<SuperboxArgs['obj']['noop()void'] | SuperboxArgs['tuple']['noop()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'noop()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Superbox smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SuperboxFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SuperboxFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SuperboxClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SuperboxClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Superbox smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SuperboxDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new SuperboxClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Superbox smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Superbox smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Superbox smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new SuperboxClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Superbox smart contract
 */
export class SuperboxClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SuperboxClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Superbox app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SuperboxClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SuperboxNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SuperboxClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SuperboxClient> {
    return new SuperboxClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SuperboxClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SuperboxClient> {
    return new SuperboxClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Superbox smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxCreate(string,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxCreate: (params: CallParams<SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void'] | SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxCreate(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxAppend(string,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxAppend: (params: CallParams<SuperboxArgs['obj']['superboxAppend(string,byte[])uint64'] | SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxAppend(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteIndex(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxDeleteIndex: (params: CallParams<SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxDeleteIndex(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteBox(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxDeleteBox: (params: CallParams<SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxDeleteBox(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteSuperbox(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxDeleteSuperbox: (params: CallParams<SuperboxArgs['obj']['superboxDeleteSuperbox(string)void'] | SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxDeleteSuperbox(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxGetMeta: (params: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxGetMeta(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetLocation(string,uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxGetLocation: (params: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxGetLocation(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetValue(string,uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    superboxGetValue: (params: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SuperboxParamsFactory.superboxGetValue(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noop: (params: CallParams<SuperboxArgs['obj']['noop()void'] | SuperboxArgs['tuple']['noop()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SuperboxParamsFactory.noop(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Superbox smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxCreate(string,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxCreate: (params: CallParams<SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void'] | SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxCreate(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxAppend(string,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxAppend: (params: CallParams<SuperboxArgs['obj']['superboxAppend(string,byte[])uint64'] | SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxAppend(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteIndex(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxDeleteIndex: (params: CallParams<SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxDeleteIndex(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteBox(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxDeleteBox: (params: CallParams<SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxDeleteBox(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteSuperbox(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxDeleteSuperbox: (params: CallParams<SuperboxArgs['obj']['superboxDeleteSuperbox(string)void'] | SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxDeleteSuperbox(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxGetMeta: (params: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxGetMeta(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetLocation(string,uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxGetLocation: (params: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxGetLocation(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetValue(string,uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    superboxGetValue: (params: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.superboxGetValue(params))
    },

    /**
     * Makes a call to the Superbox smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noop: (params: CallParams<SuperboxArgs['obj']['noop()void'] | SuperboxArgs['tuple']['noop()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SuperboxParamsFactory.noop(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Superbox smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxCreate(string,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxCreate: async (params: CallParams<SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void'] | SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxCreate(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxCreate(string,uint64,uint64,string)void'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxAppend(string,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxAppend: async (params: CallParams<SuperboxArgs['obj']['superboxAppend(string,byte[])uint64'] | SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxAppend(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxAppend(string,byte[])uint64'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteIndex(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxDeleteIndex: async (params: CallParams<SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxDeleteIndex(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxDeleteIndex(string,uint64)uint64'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteBox(string,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxDeleteBox: async (params: CallParams<SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxDeleteBox(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxDeleteBox(string,uint64)uint64'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxDeleteSuperbox(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxDeleteSuperbox: async (params: CallParams<SuperboxArgs['obj']['superboxDeleteSuperbox(string)void'] | SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxDeleteSuperbox(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxDeleteSuperbox(string)void'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxGetMeta: async (params: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxGetMeta(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetLocation(string,uint64)(uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxGetLocation: async (params: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxGetLocation(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxGetLocation(string,uint64)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `superboxGetValue(string,uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    superboxGetValue: async (params: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.superboxGetValue(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['superboxGetValue(string,uint64)byte[]'])}
    },

    /**
     * Makes a call to the Superbox smart contract using the `noop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noop: async (params: CallParams<SuperboxArgs['obj']['noop()void'] | SuperboxArgs['tuple']['noop()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SuperboxParamsFactory.noop(params))
      return {...result, return: result.return as unknown as (undefined | SuperboxReturns['noop()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SuperboxClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Superbox smart contract using the `superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async superboxGetMeta(params: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']>) {
    const result = await this.appClient.send.call(SuperboxParamsFactory.superboxGetMeta(params))
    return result.return as unknown as SuperboxReturns['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']
  }

  /**
   * Makes a readonly (simulated) call to the Superbox smart contract using the `superboxGetLocation(string,uint64)(uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async superboxGetLocation(params: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']>) {
    const result = await this.appClient.send.call(SuperboxParamsFactory.superboxGetLocation(params))
    return result.return as unknown as SuperboxReturns['superboxGetLocation(string,uint64)(uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the Superbox smart contract using the `superboxGetValue(string,uint64)byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async superboxGetValue(params: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']>) {
    const result = await this.appClient.send.call(SuperboxParamsFactory.superboxGetValue(params))
    return result.return as unknown as SuperboxReturns['superboxGetValue(string,uint64)byte[]']
  }

  /**
   * Methods to access state for the current Superbox app
   */
  state = {
  }

  public newGroup(): SuperboxComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a superboxCreate(string,uint64,uint64,string)void method call against the Superbox contract
       */
      superboxCreate(params: CallParams<SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void'] | SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxCreate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a superboxAppend(string,byte[])uint64 method call against the Superbox contract
       */
      superboxAppend(params: CallParams<SuperboxArgs['obj']['superboxAppend(string,byte[])uint64'] | SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxAppend(params)))
        resultMappers.push((v) => client.decodeReturnValue('superboxAppend(string,byte[])uint64', v))
        return this
      },
      /**
       * Add a superboxDeleteIndex(string,uint64)uint64 method call against the Superbox contract
       */
      superboxDeleteIndex(params: CallParams<SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxDeleteIndex(params)))
        resultMappers.push((v) => client.decodeReturnValue('superboxDeleteIndex(string,uint64)uint64', v))
        return this
      },
      /**
       * Add a superboxDeleteBox(string,uint64)uint64 method call against the Superbox contract
       */
      superboxDeleteBox(params: CallParams<SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxDeleteBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('superboxDeleteBox(string,uint64)uint64', v))
        return this
      },
      /**
       * Add a superboxDeleteSuperbox(string)void method call against the Superbox contract
       */
      superboxDeleteSuperbox(params: CallParams<SuperboxArgs['obj']['superboxDeleteSuperbox(string)void'] | SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxDeleteSuperbox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string) method call against the Superbox contract
       */
      superboxGetMeta(params: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxGetMeta(params)))
        resultMappers.push((v) => client.decodeReturnValue('superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)', v))
        return this
      },
      /**
       * Add a superboxGetLocation(string,uint64)(uint64,uint64) method call against the Superbox contract
       */
      superboxGetLocation(params: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxGetLocation(params)))
        resultMappers.push((v) => client.decodeReturnValue('superboxGetLocation(string,uint64)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a superboxGetValue(string,uint64)byte[] method call against the Superbox contract
       */
      superboxGetValue(params: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.superboxGetValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('superboxGetValue(string,uint64)byte[]', v))
        return this
      },
      /**
       * Add a noop()void method call against the Superbox contract
       */
      noop(params: CallParams<SuperboxArgs['obj']['noop()void'] | SuperboxArgs['tuple']['noop()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noop(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Superbox contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SuperboxComposer
  }
}
export type SuperboxComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the superboxCreate(string,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxCreate(params?: CallParams<SuperboxArgs['obj']['superboxCreate(string,uint64,uint64,string)void'] | SuperboxArgs['tuple']['superboxCreate(string,uint64,uint64,string)void']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxCreate(string,uint64,uint64,string)void'] | undefined]>

  /**
   * Calls the superboxAppend(string,byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxAppend(params?: CallParams<SuperboxArgs['obj']['superboxAppend(string,byte[])uint64'] | SuperboxArgs['tuple']['superboxAppend(string,byte[])uint64']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxAppend(string,byte[])uint64'] | undefined]>

  /**
   * Calls the superboxDeleteIndex(string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxDeleteIndex(params?: CallParams<SuperboxArgs['obj']['superboxDeleteIndex(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteIndex(string,uint64)uint64']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxDeleteIndex(string,uint64)uint64'] | undefined]>

  /**
   * Calls the superboxDeleteBox(string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxDeleteBox(params?: CallParams<SuperboxArgs['obj']['superboxDeleteBox(string,uint64)uint64'] | SuperboxArgs['tuple']['superboxDeleteBox(string,uint64)uint64']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxDeleteBox(string,uint64)uint64'] | undefined]>

  /**
   * Calls the superboxDeleteSuperbox(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxDeleteSuperbox(params?: CallParams<SuperboxArgs['obj']['superboxDeleteSuperbox(string)void'] | SuperboxArgs['tuple']['superboxDeleteSuperbox(string)void']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxDeleteSuperbox(string)void'] | undefined]>

  /**
   * Calls the superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxGetMeta(params?: CallParams<SuperboxArgs['obj']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | SuperboxArgs['tuple']['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)'] | undefined]>

  /**
   * Calls the superboxGetLocation(string,uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxGetLocation(params?: CallParams<SuperboxArgs['obj']['superboxGetLocation(string,uint64)(uint64,uint64)'] | SuperboxArgs['tuple']['superboxGetLocation(string,uint64)(uint64,uint64)']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxGetLocation(string,uint64)(uint64,uint64)'] | undefined]>

  /**
   * Calls the superboxGetValue(string,uint64)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  superboxGetValue(params?: CallParams<SuperboxArgs['obj']['superboxGetValue(string,uint64)byte[]'] | SuperboxArgs['tuple']['superboxGetValue(string,uint64)byte[]']>): SuperboxComposer<[...TReturns, SuperboxReturns['superboxGetValue(string,uint64)byte[]'] | undefined]>

  /**
   * Calls the noop()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(params?: CallParams<SuperboxArgs['obj']['noop()void'] | SuperboxArgs['tuple']['noop()void']>): SuperboxComposer<[...TReturns, SuperboxReturns['noop()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Superbox smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SuperboxComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SuperboxComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SuperboxComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SuperboxComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SuperboxComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SuperboxComposerResults<TReturns>>
}
export type SuperboxComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

