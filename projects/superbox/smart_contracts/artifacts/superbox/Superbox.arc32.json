{
    "hints": {
        "superboxCreate(string,uint64,uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "superboxAppend(string,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "superboxGetMeta(string)(uint32,uint16[],uint16,uint16,string)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "SuperboxMeta",
                    "elements": [
                        [
                            "totalByteLength",
                            "uint32"
                        ],
                        [
                            "boxByteLengths",
                            "uint16[]"
                        ],
                        [
                            "maxBoxSize",
                            "uint16"
                        ],
                        [
                            "valueSize",
                            "uint16"
                        ],
                        [
                            "valueSchema",
                            "string"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Superbox",
        "methods": [
            {
                "name": "superboxCreate",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "Superbox name/prefix"
                    },
                    {
                        "type": "uint64",
                        "name": "maxBoxSize",
                        "desc": "max individual box size"
                    },
                    {
                        "type": "uint64",
                        "name": "valueSize",
                        "desc": "value size"
                    },
                    {
                        "type": "string",
                        "name": "valueSchema",
                        "desc": "string describing the value, e.g. uint32"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create superbox metadata"
            },
            {
                "name": "superboxAppend",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "superbox name/prefix"
                    },
                    {
                        "type": "byte[]",
                        "name": "data",
                        "desc": "data to add"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "superbox total bytes used"
                },
                "desc": "Append to superbox."
            },
            {
                "name": "superboxGetMeta",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint32,uint16[],uint16,uint16,string)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}