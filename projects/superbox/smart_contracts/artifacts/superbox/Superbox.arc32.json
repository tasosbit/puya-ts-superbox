{
    "hints": {
        "superboxCreate(string,uint64,uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "superboxAppend(string,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "superboxDelete(string,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "superboxGetMeta(string)(uint16[],uint64,uint64,uint64,string)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "SuperboxMeta",
                    "elements": [
                        [
                            "boxByteLengths",
                            "uint16[]"
                        ],
                        [
                            "totalByteLength",
                            "uint64"
                        ],
                        [
                            "maxBoxSize",
                            "uint64"
                        ],
                        [
                            "valueSize",
                            "uint64"
                        ],
                        [
                            "valueSchema",
                            "string"
                        ]
                    ]
                }
            }
        },
        "superboxGetLocation(string,uint64)(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "superboxGetValue(string,uint64)byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noop()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Superbox",
        "methods": [
            {
                "name": "superboxCreate",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "maxBoxSize"
                    },
                    {
                        "type": "uint64",
                        "name": "valueSize"
                    },
                    {
                        "type": "string",
                        "name": "valueSchema"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "superboxAppend",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "superboxDelete",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "valueIndex"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "superboxGetMeta",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint16[],uint64,uint64,uint64,string)"
                }
            },
            {
                "name": "superboxGetLocation",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "valueIndex"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "superboxGetValue",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "valueIndex"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "noop",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}